{"title":"GCD","date":"2020-08-06T03:34:08.000Z","slug":"GCD","comments":true,"tags":["GCD"],"categories":["iOS"],"updated":"2020-08-07T05:39:37.000Z","content":"<h4 id=\"1-简介\">1. 简介<a href=\"post/GCD#1-简介\"></a></h4><blockquote>\n<p>Dispatch, also known as Grand Central Dispatch (GCD), contains language features, runtime libraries, and system enhancements that provide systemic, comprehensive improvements to the support for concurrent code execution on multicore hardware in macOS, iOS, watchOS, and tvOS. </p>\n<p>The BSD subsystem, Core Foundation, and Cocoa APIs have all been extended to use these enhancements to help both the system and your application to run faster, more efficiently, and with improved responsiveness. Consider how difficult it is for a single application to use multiple cores effectively, let alone to do it on different computers with different numbers of computing cores or in an environment with multiple applications competing for those cores. GCD, operating at the system level, can better accommodate the needs of all running applications, matching them to the available system resources in a balanced fashion.</p>\n</blockquote>\n<p>Dispatch 也就是 Grand Central Dispatch (GCD), 它包含语言功能，运行时库和系统增强功能，这些功能提供了系统的，全面的改进，以支持在macOS，iOS，watchOS和tvOS中的多核硬件上并发代码执行的支持。</p>\n<p>BSD子系统，Core Foundation和Cocoa API均已扩展为使用这些增强功能，以帮助系统和您的应用程序更快，更高效地运行，并提高响应速度。 考虑单个应用程序有效地使用多个内核有多么困难，更不用说在具有不同数量计算内核的不同计算机上，或者在多个应用程序竞争那些内核的环境中进行操作。 在系统级别运行的GCD可以更好地满足所有正在运行的应用程序的需求，并以平衡的方式将它们与可用的系统资源进行匹配。</p>\n<h4 id=\"2-GCD的使用\">2. GCD的使用<a href=\"post/GCD#2-GCD的使用\"></a></h4><h5 id=\"2-1-队列-DispatchQueue\">2.1  队列 <a href=\"apple-reference-documentation://hs26PogYiH\" target=\"_blank\" rel=\"noopener\"><code>DispatchQueue</code></a><a href=\"post/GCD#2-1-队列-DispatchQueue\"></a></h5><p><code>DispatchQueue</code> 用于管理应用程序主线程或后台线程上串行或并行执行任务的对象</p>\n<h6 id=\"2-1-1-队列的创建、获取方法\">2.1.1 队列的创建、获取方法<a href=\"post/GCD#2-1-1-队列的创建、获取方法\"></a></h6><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 串行队列的创建方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> serialQueue = <span class=\"type\">DispatchQueue</span>.<span class=\"keyword\">init</span>(label: <span class=\"string\">\"com.hanqi.gcdQueue\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// 并发队列的创建方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> concurrentQueue = <span class=\"type\">DispatchQueue</span>.<span class=\"keyword\">init</span>(label: <span class=\"string\">\"com.hanqi.gcdQueue\"</span>, attributes: .concurrent)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DispatchQueue.init()方法</span></span><br><span class=\"line\"><span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(label: <span class=\"type\">String</span>, qos: <span class=\"type\">DispatchQoS</span> = .unspecified, attributes: <span class=\"type\">DispatchQueue</span>.<span class=\"type\">Attributes</span> = [], autoreleaseFrequency: <span class=\"type\">DispatchQueue</span>.<span class=\"type\">AutoreleaseFrequency</span> = .inherit, target: <span class=\"type\">DispatchQueue?</span> = <span class=\"literal\">nil</span>)</span><br></pre></td></tr></table></figure>\n<p><code>label</code>: 附加到队列的字符串标签，以便在调试工具（如仪器，样本，堆栈快照和崩溃报告）中唯一地标识它。由于应用程序，库和框架都可以创建自己的调度队列，因此建议使用反向DNS命名方式（com.example.myqueue）。此参数是可选的，可以为NULL。</p>\n<p><code>qos</code>: 与队列关联的服务质量级别。该值确定系统安排任务执行的优先级。有关可能值的列表，请参见DispatchQoS.QoSClass。</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>QoS类别</th>\n<th>QoS的工作类型和重点</th>\n<th>等待执行的时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>userInteractive</td>\n<td>与用户进行交互的动作，例如：在主线程操作，刷新用户界面，或者执行动画。如果动作没有很快的发生，用户界面就会明显的卡顿。重点在于响应性和性能</td>\n<td>在瞬间执行</td>\n</tr>\n<tr>\n<td>userInitiated</td>\n<td>用户发起的动作需要立即得到结果，例如：正在打开一个保存的文档或执行一个用户点击用户界面的动作。为了用户后续的工作，需要进行这个工作。重点在于响应性和性能</td>\n<td>几乎是在瞬间执行，例如几秒钟或者更少</td>\n</tr>\n<tr>\n<td>utility</td>\n<td>可能需要一些时间才能完成的操作，不是立即需要结果的，例如：下载或者导入数据。utility任务一般有一个进度条让用户能看到。重点是在响应性和性能以及能源效率之间提供一个平衡</td>\n<td>可能需要几秒或者几分钟</td>\n</tr>\n<tr>\n<td>background</td>\n<td>在后台操作并且不需要用户看见的工作，例如：索引，同步操作和备份等。重点在能源效率</td>\n<td>工作要很长的时间，例如多少分钟或多少小时</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>(注:在Low Power Mode即低电量模式开启时后台操作包括网络请求将被暂停)</p>\n<p>除了上面介绍了4种优先级，还有2种特殊的优先级，在大部分情况下我们都不会接触或使用的这2种优先级，但是它们的存在还是有意义的，如下：</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>QoS类别</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default</td>\n<td>它的优先级在userInitiated和utility之间，这个类别并不打算给开发人员进行分类工作。没有被赋值QoS的都会被默认为这个级别，并且GCD全局队列就是运行在这个类别下</td>\n</tr>\n<tr>\n<td>unspecified</td>\n<td>它表示当前没有QoS信息，系统应该根据环境自动推断QoS信息。如果使用遗弃的API，线程有可能会脱离QoS，这个时候，线程就是unspecified QoS类别的</td>\n</tr>\n</tbody>\n</table></div></div>\n<p>最后给这些优先级做个排序的话:</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userInteractive &gt; userInitiated &gt; <span class=\"keyword\">default</span> &gt; utility &gt; background</span><br></pre></td></tr></table></figure>\n<p><code>attributes</code>: 指明串行或者并发队列   concurrent为并发队列 省略则为串行队列</p>\n<p><code>autoreleaseFrequency</code>: 自动释放队列调度的块创建的对象的频率。</p>\n<div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th>AutoreleaseFrequency</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inherit</td>\n<td>队列从其目标队列继承其自动释放频率。</td>\n</tr>\n<tr>\n<td>workItem</td>\n<td>队列在执行块之前配置一个自动释放池，并在块执行完之后释放该池中的对象。</td>\n</tr>\n<tr>\n<td>never</td>\n<td>队列未在执行的块周围设置自动释放池。</td>\n</tr>\n</tbody>\n</table></div></div>\n<p><code>target</code>: 目标队列</p>\n<p>对于串行队列 GCD 􏴖􏴗􏰒􏰍􏰚􏲜􏳝􏳞􏰍􏳵􏱅􏲏􏲐􏱟􏰧􏲏􏲐提供了一种特殊的串行队列：主队列</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 主队列获取方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> main = <span class=\"type\">DispatchQueue</span>.main</span><br></pre></td></tr></table></figure>\n<p>对于并发队列 GCD 提供了全局并发队列</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// 全局并发队列获取方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> global = <span class=\"type\">DispatchQueue</span>.global()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> qosGlobal = <span class=\"type\">DispatchQueue</span>.global(qos: <span class=\"type\">DispatchQoS</span>.<span class=\"type\">QoSClass</span>)</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-1-2-队列执行任务\">2.1.2 队列执行任务<a href=\"post/GCD#2-1-2-队列执行任务\"></a></h6><p>执行任务分为异步执行任务和同步执行任务</p>\n<ol>\n<li>异步执行任务</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queue.async &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 安排工作项以立即执行，并立即返回。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">queue.asyncAfter(deadline: .now() + <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 安排工作项目在指定时间执行，并立即返回。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">queue.asyncAfter(wallDeadline: .now() + <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 安排工作项目在指定时间后执行，并立即返回。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>同步执行任务</li>\n</ol>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queue.sync &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提交要执行的块对象，并在该块完成执行后返回。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提交要在当前队列上执行的工作项，并在该块完成执行后返回。</span></span><br><span class=\"line\">queue.sync(execute: <span class=\"type\">DispatchWorkItem</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> string = queue.sync &#123; () -&gt; <span class=\"type\">String</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"comment\">// 提交要执行的工作项目，并在完成执行后从该项目返回结果。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello world\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同步（sync）执行任务没有开启新线程，串行队列 没有开启新线程，主线程同步执行：死锁。 其他线程执行：没有开启新线程，串行执行任务</p>\n<p>异步（async）执行任务有开启新线程。并发执行任务 有开启新线程（1条），串行执行任务 没有开启新线程，串行执行任务</p>\n<h5 id=\"2-2-GCD线程间的通信\">2.2 GCD线程间的通信<a href=\"post/GCD#2-2-GCD线程间的通信\"></a></h5><p>在iOS开发过程中，我们一般在主线程里边进行UI刷新，例如:点击、滚动、拖拽等事件。我们通常把一些耗时的操作放在其他线程，比如说图片下载、文件上传等耗时操作。而当我们有时候在其他线程完成了耗时操作时，需要回到主线程，那么就用到了线程之间的通讯。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        模拟耗时操作</span></span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"type\">Thread</span>.current)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">DispatchQueue</span>.main.async &#123;</span><br><span class=\"line\"><span class=\"comment\">//        模拟耗时操作</span></span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"type\">Thread</span>.current)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\">&lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600003ef1400</span>&gt;&#123;number = <span class=\"number\">8</span>, name = (null)&#125;</span><br><span class=\"line\">&lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600003ef1400</span>&gt;&#123;number = <span class=\"number\">8</span>, name = (null)&#125;</span><br><span class=\"line\">&lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600003eec900</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-3-DispatchGroup\">2.3 DispatchGroup<a href=\"post/GCD#2-3-DispatchGroup\"></a></h5><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> group = <span class=\"type\">DispatchGroup</span>.<span class=\"keyword\">init</span>()</span><br></pre></td></tr></table></figure>\n<h6 id=\"2-3-1-DispatchGroup-notify\">2.3.1 DispatchGroup.notify(_)<a href=\"post/GCD#2-3-1-DispatchGroup-notify\"></a></h6><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> group = <span class=\"type\">DispatchGroup</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">group.enter()</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"1 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    group.leave()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">group.enter()</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"2 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    group.leave()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">group.notify(queue: <span class=\"type\">DispatchQueue</span>.main) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"notify -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x60000366c240</span>&gt;&#123;number = <span class=\"number\">5</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600003664f80</span>&gt;&#123;number = <span class=\"number\">3</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x60000366c240</span>&gt;&#123;number = <span class=\"number\">5</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600003664f80</span>&gt;&#123;number = <span class=\"number\">3</span>, name = (null)&#125;</span><br><span class=\"line\">notify -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600003660840</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;</span><br></pre></td></tr></table></figure>\n<p>当任务执行完时会执行notify 的block，实现任务间的相互依赖</p>\n<p>group.enter() 表示向group中添加一个任务</p>\n<p>group.leave() 标示group中结束一个任务。</p>\n<p>必须成对出现</p>\n<h6 id=\"2-3-2-DispatchGroup-wait\">2.3.2 DispatchGroup.wait()<a href=\"post/GCD#2-3-2-DispatchGroup-wait\"></a></h6><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> group = <span class=\"type\">DispatchGroup</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">group.enter()</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"1 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    group.leave()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">group.enter()</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"2 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    group.leave()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">group.wait()</span><br><span class=\"line\"></span><br><span class=\"line\">group.enter()</span><br><span class=\"line\"><span class=\"type\">DispatchQueue</span>.global().async &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"3 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    group.leave()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印</span></span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600003052400</span>&gt;&#123;number = <span class=\"number\">7</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x6000030491c0</span>&gt;&#123;number = <span class=\"number\">4</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600003052400</span>&gt;&#123;number = <span class=\"number\">7</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x6000030491c0</span>&gt;&#123;number = <span class=\"number\">4</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">3</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600003052400</span>&gt;&#123;number = <span class=\"number\">7</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">3</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600003052400</span>&gt;&#123;number = <span class=\"number\">7</span>, name = (null)&#125;</span><br></pre></td></tr></table></figure>\n<p>wait() 类似于栅栏函数。由于 Swift 中是没有 dispatch_barrier_sync 的，可以用这个函数代替</p>\n<h5 id=\"2-4-DispatchSemaphore\">2.4 DispatchSemaphore<a href=\"post/GCD#2-4-DispatchSemaphore\"></a></h5><p>GCD中的信号量 DispatchSemaphore  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let semaphore = DispatchSemaphore.init(value: 10)</span><br></pre></td></tr></table></figure>\n<p>value 表示有多少个临界资源</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> semaphore = <span class=\"type\">DispatchSemaphore</span>.<span class=\"keyword\">init</span>(value: <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> queue = <span class=\"type\">DispatchQueue</span>.<span class=\"keyword\">init</span>(label: <span class=\"string\">\"com.test.semaphore\"</span>, attributes: .concurrent)</span><br><span class=\"line\"></span><br><span class=\"line\">queue.async &#123;</span><br><span class=\"line\">    semaphore.wait()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"1 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    semaphore.signal()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">queue.async &#123;</span><br><span class=\"line\">    semaphore.wait()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"2 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    semaphore.signal()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">queue.async &#123;</span><br><span class=\"line\">    semaphore.wait()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"3 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    semaphore.signal()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">queue.async &#123;</span><br><span class=\"line\">    semaphore.wait()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"4 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    semaphore.signal()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印输出</span></span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x60000210ed00</span>&gt;&#123;number = <span class=\"number\">5</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x6000021188c0</span>&gt;&#123;number = <span class=\"number\">6</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x6000021188c0</span>&gt;&#123;number = <span class=\"number\">6</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x60000210ed00</span>&gt;&#123;number = <span class=\"number\">5</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">3</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x60000213ce00</span>&gt;&#123;number = <span class=\"number\">8</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">4</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x60000211e180</span>&gt;&#123;number = <span class=\"number\">9</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">4</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x60000211e180</span>&gt;&#123;number = <span class=\"number\">9</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">3</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x60000213ce00</span>&gt;&#123;number = <span class=\"number\">8</span>, name = (null)&#125;</span><br></pre></td></tr></table></figure>\n<p>注意！：  必须保证程序结束的时候 semaphore 中的临界资源和 初始值相同， 也就是要保证 semaphore.signal() 和 semaphore.wait() 成对执行</p>\n","prev":{"title":"Operation","slug":"Operation"},"next":{"title":"pthread","slug":"iOS-pthread"},"link":"https://vesincc.github.io/post/GCD/","reward":true,"copyright":{"custom":"本文遵守 CC BY-NC-ND 4.0 请保持转载后文章内容的完整，以及文章出处。本人保留所有版权相关权利。"}}