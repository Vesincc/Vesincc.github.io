{"title":"Operation","date":"2020-08-07T05:43:13.000Z","slug":"Operation","comments":true,"tags":["Operation"],"updated":"2020-08-07T07:13:11.507Z","content":"<h1 id=\"Operation、OperationQueue-简介\">Operation、OperationQueue 简介<a href=\"post/Operation#Operation、OperationQueue-简介\"></a></h1><blockquote>\n<p>NSOperation是苹果提供给我们的一套多线程解决方案。实际上NSOperation是基于GCD更高一层的封装，但是比GCD更简单易用、代码可读性也更高。</p>\n</blockquote>\n<p>NSOperation需要配合NSOperationQueue来实现多线程。因为默认情况下，NSOperation单独使用时系统同步执行操作，并没有开辟新线程的能力，只有配合NSOperationQueue才能实现异步执行。</p>\n<p>因为NSOperation是基于GCD的，那么使用起来也和GCD差不多，其中，NSOperation相当于GCD中的任务，而NSOperationQueue则相当于GCD中的队列。NSOperation实现多线程的使用步骤分为三步：</p>\n<p>1 .创建任务：先将需要执行的操作封装到一个NSOperation对象中。<br>2 .创建队列：创建NSOperationQueue对象。<br>3 .将任务加入到队列中：然后将NSOperation对象添加到NSOperationQueue中。之后呢，系统就会自动将NSOperationQueue中的NSOperation取出来，在新线程中执行操作。</p>\n<h2 id=\"GCD-和-Operation\">GCD 和  Operation<a href=\"post/Operation#GCD-和-Operation\"></a></h2><h3 id=\"GCD\">GCD<a href=\"post/Operation#GCD\"></a></h3><p>GCD是 iOS4.0 推出的，主要针对多核cpu做了优化，是C语言的技术</p>\n<p>GCD是将任务(block)添加到队列(串行/并行/全局/主队列)，并且以同步/异步的方式执行任务的函数,任务的取出遵循队列的FIFO原则：先进先出，后进后出</p>\n<p>GCD提供了一些Operation不具备的功能</p>\n<ul>\n<li>延迟执行: 既实现等待多长时间后在哪个队列中执行什么代码块</li>\n<li>调度组: 监听一组异步任务执行结束之后,我们能够得到统一的通知。</li>\n</ul>\n<h3 id=\"Operation\">Operation<a href=\"post/Operation#Operation\"></a></h3><p>NSOperation是 iOS2.0 推出的，iOS4.0 之后重写了 NSOperation</p>\n<p>Operation将操作(异步的任务)添加到队列(并发队列)，就会执行指定操作的方法</p>\n<p>Operation里提供的方便的操作：</p>\n<ul>\n<li>最大并发数</li>\n<li>队列的暂定/继续</li>\n<li>取消队列中所有的操作</li>\n<li>指定操作之间的依赖关系(GCD可以用同步实现,但是比较麻烦)</li>\n</ul>\n<h3 id=\"比较\">比较<a href=\"post/Operation#比较\"></a></h3><ol>\n<li>GCD更接近底层，而OperationQueue则更高级抽象，所以GCD在追求性能的底层操作来说，是速度最快的。</li>\n<li>从异步操作之间的事务性，顺序行，依赖关系。GCD需要自己写更多的代码来实现，而NSOperationQueue已经内建了这些支持</li>\n<li>如果异步操作的过程需要更多的被交互和UI呈现出来，NSOperationQueue会是一个更好的选择。底层代码中，任务之间不太互相依赖，而需要更高的并发能力，GCD则更有优势</li>\n<li>Operation类的某些属性都符合键值编码（KVC）和键值观察（KVO）。根据需要，您可以观察这些属性以控制应用程序的其他部分。</li>\n</ol>\n<h1 id=\"Operation、OperationQueue-基本使用\">Operation、OperationQueue 基本使用<a href=\"post/Operation#Operation、OperationQueue-基本使用\"></a></h1><h2 id=\"创建任务\">创建任务<a href=\"post/Operation#创建任务\"></a></h2><p>Operation是一个抽象类,并不具备封装操作的能力,必须使用它的子类</p>\n<ul>\n<li>NSInvocationOperation(Swift不支持)</li>\n</ul>\n<p>默认是不会开启线程的,只会在当前的线程中执行操作,可以通过Operation和OperationQueue实现多线程</p>\n<ul>\n<li>BlockOperation</li>\n</ul>\n<p>只要BlockOperation封装的操作数 &gt; 1,就会异步执行操作,但是不会无限制的创建线程</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> operation = <span class=\"type\">BlockOperation</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">operation.addExecutionBlock &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"1 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">operation.addExecutionBlock &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"2 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">operation.addExecutionBlock &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"3 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">operation.start()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印输出</span></span><br><span class=\"line\"><span class=\"number\">3</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x60000093a080</span>&gt;&#123;number = <span class=\"number\">5</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600000934840</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600000926200</span>&gt;&#123;number = <span class=\"number\">3</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600000926200</span>&gt;&#123;number = <span class=\"number\">3</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600000934840</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;</span><br><span class=\"line\"><span class=\"number\">3</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x60000093a080</span>&gt;&#123;number = <span class=\"number\">5</span>, name = (null)&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"OperationQueue\">OperationQueue<a href=\"post/Operation#OperationQueue\"></a></h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue = <span class=\"type\">OperationQueue</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">queue.addOperation &#123; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最大并发数\">最大并发数<a href=\"post/Operation#最大并发数\"></a></h3><p>OperationQueue 同时具备串行和并发的功能,默认情况下是并发的, 可以手动设置为串行队列,通过设置最大并发数属性来更改</p>\n<p>maxConcurrentOperationCount 默认情况下为-1，表示不进行限制，可进行并发执行。</p>\n<p>maxConcurrentOperationCount 为1时，队列为串行队列。只能串行执行。</p>\n<p>maxConcurrentOperationCount 大于1时，队列为并发队列。操作并发执行，当然这个值不应超过系统限制，即使自己设置一个很大的值，系统也会自动调整为 min{自己设定的值，系统设定的默认最大值}。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue = <span class=\"type\">OperationQueue</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\"><span class=\"comment\">// maxConcurrentOperationCount == 1 时，为串行队列</span></span><br><span class=\"line\">queue.maxConcurrentOperationCount = <span class=\"number\">1</span></span><br><span class=\"line\">queue.addOperation &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注：</p>\n<ul>\n<li>取消队列中的所有任务,除了正在执行的任务,一旦被取消,就不能回复之前的操作。</li>\n<li>将最大操作数的值设置为1,可以实现任务的串行效果,但是要注意的是,并不是只开一条子线程(通常会开两条子线程,循环回收复用)</li>\n<li>最大并发数6以内，不要开太多，因为虽然任务是在子线程进行处理的，但是cpu处理这些过多的子线程可能会影响UI，让UI卡顿。</li>\n</ul>\n<h3 id=\"cancelAllOperations\">cancelAllOperations()<a href=\"post/Operation#cancelAllOperations\"></a></h3><p>取消队列中的任务</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">queue.cancelAllOperations()</span><br></pre></td></tr></table></figure>\n<p>当前正在处于执行状态的任务是不能够取消的,只能取消等待的任务</p>\n<h3 id=\"队列的挂起和恢复\">队列的挂起和恢复<a href=\"post/Operation#队列的挂起和恢复\"></a></h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 暂停队列</span></span><br><span class=\"line\">queue.isSuspended = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\">// 恢复队列</span></span><br><span class=\"line\">queue.isSuspended = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"等待Options完成\">等待Options完成<a href=\"post/Operation#等待Options完成\"></a></h3><h4 id=\"waitUntilFinished\">waitUntilFinished()<a href=\"post/Operation#waitUntilFinished\"></a></h4><p>如果需要在当前线程中处理operation完成后的结果,可以使用NSOperation的waitUntilFinished方法阻塞当前线程，等待operation完成</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> op = <span class=\"type\">BlockOperation</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">op.addExecutionBlock &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"1 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">op.addExecutionBlock &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"2 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">op.start()</span><br><span class=\"line\"></span><br><span class=\"line\">op.waitUntilFinished()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"finish\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印输出</span></span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600000e08840</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600000e1db00</span>&gt;&#123;number = <span class=\"number\">8</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600000e08840</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600000e1db00</span>&gt;&#123;number = <span class=\"number\">8</span>, name = (null)&#125;</span><br><span class=\"line\">finish</span><br></pre></td></tr></table></figure>\n<h4 id=\"waitUntilAllOperationsAreFinished\">waitUntilAllOperationsAreFinished()<a href=\"post/Operation#waitUntilAllOperationsAreFinished\"></a></h4><p>使用OperationQueue的waitUntilAllOperationsAreFinished方法, 阻塞当前线程，等待queue的所有操作执行完毕</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue = <span class=\"type\">OperationQueue</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">queue.addOperation &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"1 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">queue.addOperation &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"2 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">queue.waitUntilAllOperationsAreFinished()</span><br><span class=\"line\"></span><br><span class=\"line\">queue.addOperation &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"3 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  打印输出</span></span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600000180a40</span>&gt;&#123;number = <span class=\"number\">7</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x60000019a4c0</span>&gt;&#123;number = <span class=\"number\">5</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600000180a40</span>&gt;&#123;number = <span class=\"number\">7</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x60000019a4c0</span>&gt;&#123;number = <span class=\"number\">5</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">3</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x6000001b5580</span>&gt;&#123;number = <span class=\"number\">9</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">3</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x6000001b5580</span>&gt;&#123;number = <span class=\"number\">9</span>, name = (null)&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Operation-添加依赖\">Operation 添加依赖<a href=\"post/Operation#Operation-添加依赖\"></a></h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue = <span class=\"type\">OperationQueue</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\"><span class=\"keyword\">let</span> op1 = <span class=\"type\">BlockOperation</span>.<span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"1 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> op2 = <span class=\"type\">BlockOperation</span>.<span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"2 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">op1.addDependency(op2)</span><br><span class=\"line\">queue.addOperation(op1)</span><br><span class=\"line\">queue.addOperation(op2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印输出</span></span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600002dec300</span>&gt;&#123;number = <span class=\"number\">5</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">2</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600002dec300</span>&gt;&#123;number = <span class=\"number\">5</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600002de9980</span>&gt;&#123;number = <span class=\"number\">4</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x600002de9980</span>&gt;&#123;number = <span class=\"number\">4</span>, name = (null)&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Operation-优先级\">Operation 优先级<a href=\"post/Operation#Operation-优先级\"></a></h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">op1.queuePriority = .low</span><br></pre></td></tr></table></figure>\n<h3 id=\"线程建通信\">线程建通信<a href=\"post/Operation#线程建通信\"></a></h3><p>在 iOS 开发过程中，我们一般在主线程里边进行 UI 刷新，例如：点击、滚动、拖拽等事件。我们通常把一些耗时的操作放在其他线程，比如说图片下载、文件上传等耗时操作。而当我们有时候在其他线程完成了耗时操作时，需要回到主线程，那么就用到了线程之间的通讯。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> queue = <span class=\"type\">OperationQueue</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">queue.addOperation &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">0</span> ..&lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"1 -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">OperationQueue</span>.main.addOperation &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span>.sleep(forTimeInterval: <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">\"main -&gt; \\(Thread.current)\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印输出</span></span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x6000037d2040</span>&gt;&#123;number = <span class=\"number\">7</span>, name = (null)&#125;</span><br><span class=\"line\"><span class=\"number\">1</span> -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x6000037d2040</span>&gt;&#123;number = <span class=\"number\">7</span>, name = (null)&#125;</span><br><span class=\"line\">main -&gt; &lt;<span class=\"type\">NSThread</span>: <span class=\"number\">0x6000037c0840</span>&gt;&#123;number = <span class=\"number\">1</span>, name = main&#125;</span><br></pre></td></tr></table></figure>\n","next":{"title":"GCD","slug":"GCD"},"link":"https://vesincc.github.io/post/Operation/","toc":[{"title":"Operation、OperationQueue 简介","id":"Operation、OperationQueue-简介","index":"1","children":[{"title":"GCD 和  Operation","id":"GCD-和-Operation","index":"1.1","children":[{"title":"GCD","id":"GCD","index":"1.1.1"},{"title":"Operation","id":"Operation","index":"1.1.2"},{"title":"比较","id":"比较","index":"1.1.3"}]}]},{"title":"Operation、OperationQueue 基本使用","id":"Operation、OperationQueue-基本使用","index":"2","children":[{"title":"创建任务","id":"创建任务","index":"2.1"},{"title":"OperationQueue","id":"OperationQueue","index":"2.2","children":[{"title":"最大并发数","id":"最大并发数","index":"2.2.1"},{"title":"cancelAllOperations()","id":"cancelAllOperations","index":"2.2.2"},{"title":"队列的挂起和恢复","id":"队列的挂起和恢复","index":"2.2.3"},{"title":"等待Options完成","id":"等待Options完成","index":"2.2.4"},{"title":"Operation 添加依赖","id":"Operation-添加依赖","index":"2.2.5"},{"title":"Operation 优先级","id":"Operation-优先级","index":"2.2.6"},{"title":"线程建通信","id":"线程建通信","index":"2.2.7"}]}]}],"reward":true,"copyright":{"custom":"本文遵守 CC BY-NC-ND 4.0 请保持转载后文章内容的完整，以及文章出处。本人保留所有版权相关权利。"}}