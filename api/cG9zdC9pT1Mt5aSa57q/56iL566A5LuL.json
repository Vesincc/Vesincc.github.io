{"title":"多线程","date":"2019-07-09T02:04:46.000Z","slug":"iOS-多线程简介","comments":true,"tags":["多线程"],"categories":["iOS"],"updated":"2019-07-18T01:52:47.000Z","content":"<h2 id=\"多线程\">多线程<a href=\"post/iOS-多线程简介#多线程\"></a></h2><h3 id=\"简介\">简介<a href=\"post/iOS-多线程简介#简介\"></a></h3><p>我们通常会把每个任务 <code>Task</code> 称为一个进程 <code>Process</code>，而一个进程可以包含多个顺序执行流，每个执行流就是一个线程 <code>Thread</code>。</p>\n<h3 id=\"概述\">概述<a href=\"post/iOS-多线程简介#概述\"></a></h3><p>目前我们所接触到的操作系统都支持多线程的，如 <code>Windows</code>、<code>Mac OS</code>、<code>iOS</code>、<code>Android</code> 等。</p>\n<p>我们的应用在操作系统上运行时，存在着并发执行的多条指令流，每一个指令流称之为一个线程，多线程意味着一个程序一个程序内部有多条指令并发执行。</p>\n<p>并发执行的含义是操作系统将管理的时间片平均地分配给每一个线程，从而保证所有的线程都能够在极短的时间内得到处理；一个时间片只能执行一个线程，由于时间片是一个很小的时间单位，而 <code>CPU</code> 的处理速度又非常快，加之线程的运算量并不是特别大，因此操作系统能在很短的时间内切换线程，所有我们看起来就好像是多个线程并发执行的。所以对于单核 <code>CPU</code> 来说，指令仍是串行执行线程的。</p>\n<h4 id=\"线程和进程\">线程和进程<a href=\"post/iOS-多线程简介#线程和进程\"></a></h4><p>程序在运行时，操作系统会为程序分配资源，程序会转换为一个或多个进程，每一个进程都会占用一定的系统资源和内存空间，并且各个进程之间相互独立，每一个程序运行至少都会有一个进程</p>\n<p>线程是进程的组成单元，一个进程可以拥有多个线程，每一个进程至少都有一个线程，多线程技术也是为了支持并发操作，最大限度的提高 <code>CPU</code> 利用率；线程也会抢占系统资源，与其他的线程争夺 <code>CPU</code> 的使用权。</p>\n<ol>\n<li>线程是 <code>CPU</code> <strong>执行任务</strong> 的最小单位。</li>\n<li>进程是 <code>CPU</code> <strong>分配资源 </strong>的最小单位。</li>\n<li>一个进程中至少要有一个线程。</li>\n<li>同一个进程内的线程共享进程的资源。</li>\n</ol>\n<h4 id=\"多线程的优点\">多线程的优点<a href=\"post/iOS-多线程简介#多线程的优点\"></a></h4><ul>\n<li>能适当的提高程序的执行效率</li>\n<li>能适当提高资源利用率</li>\n</ul>\n<h4 id=\"多线程缺点\">多线程缺点<a href=\"post/iOS-多线程简介#多线程缺点\"></a></h4><ul>\n<li>创建线程是需要成本的：<code>iOS</code> 下主要成本包括：在栈空间的子线程 <code>512KB</code>、主线程 <code>1MB</code>，创建线程大约需要90毫秒的创建时间。</li>\n<li>线程越多，<code>CPU</code>在调度线程上的开销就越大。</li>\n<li>线程越多，程序设计就越复杂：因为要考虑到线程之间的通信，多线程的数据共享。</li>\n</ul>\n<h2 id=\"主要概念\">主要概念<a href=\"post/iOS-多线程简介#主要概念\"></a></h2><h3 id=\"进程\">进程<a href=\"post/iOS-多线程简介#进程\"></a></h3><p>一个具有一定独立功能的程序关于某个数据集合的一次运行活动。在 <code>iOS</code> 系统中正在运行的每一个应用程序都是一个进程，每个进程系统会独立的分配内存，每个进程均运行在其专用且受保护的内存空间内。</p>\n<h3 id=\"线程\">线程<a href=\"post/iOS-多线程简介#线程\"></a></h3><p>程序执行流的最小单元，线程是进程中的一个实体。进程要想执行任务，必须得有线程（进程至少有1条线程，称为主线程），进程的所有任务都在线程中执行。</p>\n<h3 id=\"多线程-1\">多线程<a href=\"post/iOS-多线程简介#多线程-1\"></a></h3><p>1个进程中可以开启多条线程，每条线程可以并行（同时）执行不同的任务<br>多线程技术可以提高程序的执行效率</p>\n<h3 id=\"队列\">队列<a href=\"post/iOS-多线程简介#队列\"></a></h3><p>装载线程任务的队形结构，先进先出 <code>(FIFO)</code></p>\n<h3 id=\"同步-sync\">同步 <code>(sync)</code><a href=\"post/iOS-多线程简介#同步-sync\"></a></h3><p>只能在当前线程中执行任务，不具备开启新线程的能力，任务会立刻执行，会阻塞当前线程并等待任务执行完毕并返回后当前线程才会继续往下运行。</p>\n<h3 id=\"异步-async\">异步 <code>(async)</code><a href=\"post/iOS-多线程简介#异步-async\"></a></h3><p>可以在新的线程中执行任务，具备开启新线程的能力，但不一定会开新线程，当前线程会直接往下执行，不会阻塞当前线程</p>\n<h3 id=\"串行\">串行<a href=\"post/iOS-多线程简介#串行\"></a></h3><p>指任务执行顺序，只能一个接一个顺序执行，</p>\n<h3 id=\"并发\">并发<a href=\"post/iOS-多线程简介#并发\"></a></h3><p>无序执行任务</p>\n<h3 id=\"主线程\">主线程<a href=\"post/iOS-多线程简介#主线程\"></a></h3><p>一个 <code>iOS</code> 程序运行后，默认会开启一条线程，成为主线程或 <code>UI</code> 线程。不能在主线程中处理耗时操作。</p>\n<p>主线程的作用：</p>\n<ol>\n<li>显示、刷新 <code>UI</code></li>\n<li>处理 <code>UI</code> 事件，如点击、拖动等</li>\n</ol>\n<h2 id=\"iOS-中的多线程\">iOS 中的多线程<a href=\"post/iOS-多线程简介#iOS-中的多线程\"></a></h2><div class=\"article-bounded\"><div class=\"article-table\"><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">多线程方案</th>\n<th style=\"text-align:left\">简介</th>\n<th style=\"text-align:center\">语言</th>\n<th style=\"text-align:center\">线程生命周期</th>\n<th style=\"text-align:center\">使用频率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">pthread</td>\n<td style=\"text-align:left\">一套通用的多线程API<br>适用于Unix、Linux、Windows等系统<br>跨平台、可移植<br>使用难度大</td>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\">手动管理</td>\n<td style=\"text-align:center\">几乎不用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NSThread</td>\n<td style=\"text-align:left\">使用更加面向对象<br>简单易用，可直接操作线程对象</td>\n<td style=\"text-align:center\">OC</td>\n<td style=\"text-align:center\">手动管理</td>\n<td style=\"text-align:center\">偶尔使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GCD</td>\n<td style=\"text-align:left\">旨在替代NSThread等线程技术<br>充分利用设备的多核</td>\n<td style=\"text-align:center\">C</td>\n<td style=\"text-align:center\">自动管理</td>\n<td style=\"text-align:center\">经常使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">NSOpreation</td>\n<td style=\"text-align:left\">基于GCD<br>比GCD多了一些更简单实用的功能<br>使用更加面向对象</td>\n<td style=\"text-align:center\">OC</td>\n<td style=\"text-align:center\">自动管理</td>\n<td style=\"text-align:center\">经常使用</td>\n</tr>\n</tbody>\n</table></div></div>\n","prev":{"title":"pthread","slug":"iOS-pthread"},"next":{"title":"Runtime(七) Category","slug":"iOS-runtime-node-7"},"link":"https://vesincc.github.io/post/iOS-多线程简介/","toc":[{"title":"多线程","id":"多线程","index":"1","children":[{"title":"简介","id":"简介","index":"1.1"},{"title":"概述","id":"概述","index":"1.2","children":[{"title":"线程和进程","id":"线程和进程","index":"1.2.1"},{"title":"多线程的优点","id":"多线程的优点","index":"1.2.2"},{"title":"多线程缺点","id":"多线程缺点","index":"1.2.3"}]}]},{"title":"主要概念","id":"主要概念","index":"2","children":[{"title":"进程","id":"进程","index":"2.1"},{"title":"线程","id":"线程","index":"2.2"},{"title":"多线程","id":"多线程-1","index":"2.3"},{"title":"队列","id":"队列","index":"2.4"},{"title":"同步 <code>(sync)</code>","id":"同步-sync","index":"2.5"},{"title":"异步 <code>(async)</code>","id":"异步-async","index":"2.6"},{"title":"串行","id":"串行","index":"2.7"},{"title":"并发","id":"并发","index":"2.8"},{"title":"主线程","id":"主线程","index":"2.9"}]},{"title":"iOS 中的多线程","id":"iOS-中的多线程","index":"3"}],"reward":true,"copyright":{"custom":"本文遵守 CC BY-NC-ND 4.0 请保持转载后文章内容的完整，以及文章出处。本人保留所有版权相关权利。"}}