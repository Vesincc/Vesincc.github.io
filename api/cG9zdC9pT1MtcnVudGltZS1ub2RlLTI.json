{"title":"Runtime(二) 基础定义","date":"2019-05-05T05:40:49.000Z","slug":"iOS-runtime-node-2","comments":true,"tags":["Runtime"],"categories":["iOS"],"updated":"2019-07-10T03:35:32.000Z","content":"<h1 id=\"Runtime-基础定义\">Runtime 基础定义<a href=\"post/iOS-runtime-node-2#Runtime-基础定义\"></a></h1><p>我们可以在<code>objc-private.h</code>中查看一些常用数据结构的基础定义，当前为<code>objc750.1</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_class *Class;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_object *<span class=\"keyword\">id</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> method_t *Method;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> ivar_t *Ivar;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> category_t *Category;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> property_t *objc_property_t;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h2 id=\"id\">id<a href=\"post/iOS-runtime-node-2#id\"></a></h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_object *<span class=\"keyword\">id</span>;</span><br></pre></td></tr></table></figure>\n<p>我们常用到的id类型其实就是<code>objc_object</code>的别名，也就是OC的实例对象。我们都知道，每一个实例对象都有一个<code>isa</code>指针指向该实例对象的类对象，我们看一下实例对象的具体定义</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> objc_object &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    isa_t isa;</span><br><span class=\"line\"></span><br><span class=\"line\">public: </span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在<code>objc750.1</code>中<code>isa</code>是一个<code>isa_t</code>类型的结构体，而<code>isa_t</code>的定义如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">union</span> isa_t &#123;</span><br><span class=\"line\">    isa_t() &#123; &#125;</span><br><span class=\"line\">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class cls;</span><br><span class=\"line\">    uintptr_t bits;</span><br><span class=\"line\"><span class=\"meta\">#if defined(ISA_BITFIELD)</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">        ISA_BITFIELD;  <span class=\"comment\">// defined in isa.h</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>isa_t</code>是一个<code>union</code>的结构体，<code>union</code>类似于<code>c++</code>结构体，其内部可以定义成员变量和函数，在<code>isa_t</code>中定义了<code>cls</code>、<code>bits</code>、<code>isa_t</code>三部分，下面的结构体就是<code>isa_t</code>的结构体构成。</p>\n<p>下面对<code>isa_t</code>中的结构体进行了位域声明</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># if __arm64__</span></span><br><span class=\"line\"><span class=\"meta\">#   define ISA_MASK        0x0000000ffffffff8ULL</span></span><br><span class=\"line\"><span class=\"meta\">#   define ISA_MAGIC_MASK  0x000003f000000001ULL</span></span><br><span class=\"line\"><span class=\"meta\">#   define ISA_MAGIC_VALUE 0x000001a000000001ULL</span></span><br><span class=\"line\"><span class=\"meta\">#   define ISA_BITFIELD                                                      \\</span></span><br><span class=\"line\">      uintptr_t nonpointer        : <span class=\"number\">1</span>;  <span class=\"comment\">/*是32位还是64位*/</span></span><br><span class=\"line\">      uintptr_t has_assoc         : <span class=\"number\">1</span>;  <span class=\"comment\">/*是否有关联引用，没有关联引用可以更快释放 */</span></span><br><span class=\"line\">      uintptr_t has_cxx_dtor      : <span class=\"number\">1</span>;  <span class=\"comment\">/*是否含有析构函数*/</span></span><br><span class=\"line\">      uintptr_t shiftcls          : <span class=\"number\">33</span>; <span class=\"comment\">/*MACH_VM_MAX_ADDRESS 0x1000000000 isa 指向的地址*/</span></span><br><span class=\"line\">      uintptr_t magic             : <span class=\"number\">6</span>;  <span class=\"comment\">/*是否初始化完成*/</span></span><br><span class=\"line\">      uintptr_t weakly_referenced : <span class=\"number\">1</span>;  <span class=\"comment\">/*是否被弱引用*/</span></span><br><span class=\"line\">      uintptr_t deallocating      : <span class=\"number\">1</span>;  <span class=\"comment\">/*是否释放中*/</span></span><br><span class=\"line\">      uintptr_t has_sidetable_rc  : <span class=\"number\">1</span>;  <span class=\"comment\">/*是否引用计数太大越界*/</span> </span><br><span class=\"line\">      uintptr_t extra_rc          : <span class=\"number\">19</span>  <span class=\"comment\">/*引用计数*/</span></span><br><span class=\"line\"><span class=\"meta\">#   define RC_ONE   (1ULL<span class=\"meta-string\">&lt;&lt;45)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#   define RC_HALF  (1ULL&lt;&lt;18)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"># elif __x86_64__</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#   define ISA_MASK        0x00007ffffffffff8ULL</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#   define ISA_MAGIC_MASK  0x001f800000000001ULL</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#   define ISA_MAGIC_VALUE 0x001d800000000001ULL</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#   define ISA_BITFIELD                                                        \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">      uintptr_t nonpointer        : 1;                                         \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">      uintptr_t has_assoc         : 1;                                         \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">      uintptr_t has_cxx_dtor      : 1;                                         \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">      uintptr_t shiftcls          : 44; /*MACH_VM_MAX_ADDRESS 0x7fffffe00000*/ \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">      uintptr_t magic             : 6;                                         \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">      uintptr_t weakly_referenced : 1;                                         \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">      uintptr_t deallocating      : 1;                                         \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">      uintptr_t has_sidetable_rc  : 1;                                         \\</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">      uintptr_t extra_rc          : 8</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#   define RC_ONE   (1ULL&lt;&lt;56)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#   define RC_HALF  (1ULL&lt;&lt;7)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"></span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"># else</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#   error unknown architecture for packed isa</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\"># endif</span></span></span><br></pre></td></tr></table></figure>\n<p>在<code>arm64</code>架构上的位域声明从<code>nonpointer</code>到<code>extra_rc</code>，从低位到高位进行排列，位域总共8字节，所有的位域加在一起也是刚好64位。要获取其中某一位的值只需要与对应的64位mask进行逻辑与运算即可。</p>\n<p>位域声明中的<code>shiftcls</code>字段其实是指向的类的内存地址，也就是<code>isa</code>真正指向的类对象的地址。用<code>0x0000000ffffffff8</code> 对<code>isa_t</code>进行逻辑与操作便可以获取到<code>isa</code>指向的类对象的地址。源码中对<code>shiftcls</code>有注释<code>/*MACH_VM_MAX_ADDRESS 0x1000000000*/</code> 操作系统内核占用最大地址，所以类对象的内存地址都是从0x1000000001开始的，我们可以打印一类对象的内存地址进行验证。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"NSObject类对象-&gt;%p\"</span>, [<span class=\"built_in\">NSObject</span> <span class=\"keyword\">class</span>]);</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"123常量-&gt;%p\"</span>, <span class=\"string\">@\"123\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">NSObject</span> *p = [[<span class=\"built_in\">NSObject</span> alloc] init];</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"实例对象-&gt;%p\"</span>, p);</span><br></pre></td></tr></table></figure>\n<p>打印结果如下：<br><img src=\"https://s2.ax1x.com/2019/04/28/EQunNq.jpg\" alt></p>\n<h2 id=\"Class\">Class<a href=\"post/iOS-runtime-node-2#Class\"></a></h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_class *Class;</span><br></pre></td></tr></table></figure>\n<p><code>objc_class</code>的定义如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> objc_class : objc_object &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Class ISA;</span></span><br><span class=\"line\">    Class superclass;</span><br><span class=\"line\">    cache_t cache;             <span class=\"comment\">// formerly cache pointer and vtable</span></span><br><span class=\"line\">    class_data_bits_t bits;    <span class=\"comment\">// class_rw_t * plus custom rr/alloc flags</span></span><br><span class=\"line\"></span><br><span class=\"line\">    class_rw_t *data() &#123; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bits.data();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> setData(class_rw_t *newData) &#123;</span><br><span class=\"line\">        bits.setData(newData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在OC中，类也是一个对象，类的结构体<code>objc_class</code>是继承自<code>objc_object</code>的，类也具备对象所有的特征。除此之外在<code>objc_class</code>中还定义了三个成员变量。<code>superclass</code>是一个<code>objc_class</code>类型的指针，指向其父类的<code>objc_class</code>结构体。<code>cache</code>处理已调用方法的缓存。<code>bits</code>是一个<code>class_data_bits_t</code>类型结构体，其内部只有一个<code>uintptr_t</code>类型的成员变量<code>bits</code>，存储了<code>class_rw_t</code>的地址。<code>objc_class</code>结构体中定义的一些函数，其内部都是通过<code>bits</code>实现的。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> class_data_bits_t &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Values are the FAST_ flags above.</span></span><br><span class=\"line\">    uintptr_t bits;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    ...</span><br><span class=\"line\">public:</span><br><span class=\"line\">    class_rw_t* data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (class_rw_t *)(bits &amp; FAST_DATA_MASK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> setData(class_rw_t *newData)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        assert(!data()  ||  (newData-&gt;flags &amp; (RW_REALIZING | RW_FUTURE)));</span><br><span class=\"line\">        <span class=\"comment\">// Set during realization or construction only. No locking needed.</span></span><br><span class=\"line\">        <span class=\"comment\">// Use a store-release fence because there may be concurrent</span></span><br><span class=\"line\">        <span class=\"comment\">// readers of data and data's contents.</span></span><br><span class=\"line\">        uintptr_t newBits = (bits &amp; ~FAST_DATA_MASK) | (uintptr_t)newData;</span><br><span class=\"line\">        atomic_thread_fence(memory_order_release);</span><br><span class=\"line\">        bits = newBits;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从<code>objc_class</code>源码可以看出，可以通过<code>bits</code>结构体的<code>data()</code>函数，获取<code>class_rw_t</code>指针。而该指针是<code>class_data_bits_t</code>的<code>bits</code>指针进行位运算查找的对应值。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#define FAST_DATA_MASK          0x00007ffffffffff8UL</span></span><br></pre></td></tr></table></figure>\n<p><code>uintptr_t</code>的本质就是一个<code>unsigned long</code>的<code>typedef</code>。在64位处理器中<code>unsigned long</code>占8字节也就是二进制的64位。通过和<code>FAST_DATA_MASK</code>进行与运算，取得<code>bits</code>中得<code>47-3</code>位。也就是<code>class_rw_t</code>的指针。</p>\n<p>OC中一个指针的长度是47位，最后三位代表其他的一些定义。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第0位：是否是swift</span></span><br><span class=\"line\"><span class=\"meta\">#define FAST_IS_SWIFT_LEGACY    (1UL<span class=\"meta-string\">&lt;&lt;0)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">// 第1位：当前类或父类是否定义retain、release等方法</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define FAST_IS_SWIFT_STABLE    (1UL&lt;&lt;1)</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">// 第2位：类或父类是否需要初始化isa</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-string\">#define FAST_HAS_DEFAULT_RR     (1UL&lt;&lt;2)</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"class-rw-t和class-ro-t\">class_rw_t和class_ro_t<a href=\"post/iOS-runtime-node-2#class-rw-t和class-ro-t\"></a></h3><p>和<code>class_data_bits_t</code>相关的有两个很重要的结构体：<code>class_rw_t</code>和<code>class_ro_t</code>，其中都定义了<code>method_array_t</code>、<code>property_array_t</code>、<code>protocol_array_t</code>等关键信息。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> class_rw_t &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Be warned that Symbolication knows the layout of this structure.</span></span><br><span class=\"line\">    uint32_t flags;</span><br><span class=\"line\">    uint32_t version;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> class_ro_t *ro;</span><br><span class=\"line\"></span><br><span class=\"line\">    method_array_t methods;</span><br><span class=\"line\">    property_array_t properties;</span><br><span class=\"line\">    protocol_array_t protocols;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class firstSubclass;</span><br><span class=\"line\">    Class nextSiblingClass;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> *demangledName;</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> class_ro_t &#123;</span><br><span class=\"line\">    uint32_t flags;</span><br><span class=\"line\">    uint32_t instanceStart;</span><br><span class=\"line\">    uint32_t instanceSize;</span><br><span class=\"line\"><span class=\"meta\">#ifdef __LP64__</span></span><br><span class=\"line\">    uint32_t reserved;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> uint8_t * ivarLayout;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * name;</span><br><span class=\"line\">    method_list_t * baseMethodList;</span><br><span class=\"line\">    protocol_list_t * baseProtocols;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ivar_list_t * ivars;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> uint8_t * weakIvarLayout;</span><br><span class=\"line\">    property_list_t *baseProperties;</span><br><span class=\"line\"></span><br><span class=\"line\">    method_list_t *baseMethods() <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> baseMethodList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在编译后<code>class_data_bits_t</code>是指向的一个<code>class_ro_t</code>的地址，这个结构体是不可变的(read only)。在运行时才会通过<code>static Class realizeClass(Class cls)</code>函数将<code>bits</code>指向<code>class_rw_t</code>。</p>\n<p>在程序初始化<code>Class</code>时会吧编译时存在<code>bits</code>中的<code>class_ro_t</code>取出并创建<code>class_rw_t</code>，再将<code>class_ro_t</code>赋值给<code>class_rw_t</code>中的<code>ro</code>，最后把<code>class_rw_t</code>设置给<code>bits</code>。</p>\n<p><code>realizeClass(Class cls)</code>的精简代码如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> Class realizeClass(Class cls)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> class_ro_t *ro;</span><br><span class=\"line\">    class_rw_t *rw;</span><br><span class=\"line\">    Class supercls;</span><br><span class=\"line\">    Class metacls;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isMeta;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cls) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cls-&gt;isRealized()) <span class=\"keyword\">return</span> cls;</span><br><span class=\"line\"></span><br><span class=\"line\">    ro = (<span class=\"keyword\">const</span> class_ro_t *)cls-&gt;data();</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// Normal class. Allocate writeable class data.</span></span><br><span class=\"line\">    rw = (class_rw_t *)calloc(<span class=\"keyword\">sizeof</span>(class_rw_t), <span class=\"number\">1</span>);</span><br><span class=\"line\">    rw-&gt;ro = ro;</span><br><span class=\"line\">    rw-&gt;flags = RW_REALIZED|RW_REALIZING;</span><br><span class=\"line\">    cls-&gt;setData(rw);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    isMeta = ro-&gt;flags &amp; RO_META;</span><br><span class=\"line\"></span><br><span class=\"line\">    rw-&gt;version = isMeta ? <span class=\"number\">7</span> : <span class=\"number\">0</span>;  </span><br><span class=\"line\">    supercls = realizeClass(remapClass(cls-&gt;superclass));</span><br><span class=\"line\">    metacls = realizeClass(remapClass(cls-&gt;ISA()));</span><br><span class=\"line\"></span><br><span class=\"line\">    cls-&gt;setInstanceSize(ro-&gt;instanceSize);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (supercls) &#123;</span><br><span class=\"line\">        addSubclass(supercls, cls);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        addRootClass(cls);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Attach categories</span></span><br><span class=\"line\">    methodizeClass(cls);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cls;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>addSubclass</code>和<code>addRootClass</code>负责将整个对象结构串起来。我们可以通过<code>class_rw_t</code>获取到当前类的所有子类。</p>\n<p>初始化<code>rw</code>后，<code>rw</code>的<code>method_array_t</code>、<code>property_array_t</code>、<code>protocol_array_t</code>都是空的，还需要<code>methodizeClass</code>对其进行赋值，其精简代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> methodizeClass(Class cls)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> isMeta = cls-&gt;isMetaClass();</span><br><span class=\"line\">    auto rw = cls-&gt;data();</span><br><span class=\"line\">    auto ro = rw-&gt;ro;</span><br><span class=\"line\"></span><br><span class=\"line\">    method_list_t *list = ro-&gt;baseMethods();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list) &#123;</span><br><span class=\"line\">        prepareMethodLists(cls, &amp;list, <span class=\"number\">1</span>, <span class=\"literal\">YES</span>, isBundleClass(cls));</span><br><span class=\"line\">        rw-&gt;methods.attachLists(&amp;list, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    property_list_t *proplist = ro-&gt;baseProperties;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (proplist) &#123;</span><br><span class=\"line\">        rw-&gt;properties.attachLists(&amp;proplist, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protocol_list_t *protolist = ro-&gt;baseProtocols;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (protolist) &#123;</span><br><span class=\"line\">        rw-&gt;protocols.attachLists(&amp;protolist, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cls-&gt;isRootMetaclass()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// root metaclass</span></span><br><span class=\"line\">        addMethod(cls, SEL_initialize, (IMP)&amp;objc_noop_imp, <span class=\"string\">\"\"</span>, <span class=\"literal\">NO</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Attach categories.</span></span><br><span class=\"line\">    category_list *cats = unattachedCategoriesForClass(cls, <span class=\"literal\">true</span> <span class=\"comment\">/*realizing*/</span>);</span><br><span class=\"line\">    attachCategories(cls, cats, <span class=\"literal\">false</span> <span class=\"comment\">/*don't flush caches*/</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cats) free(cats);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该函数会把<code>ro</code>中的<code>list</code>取出来赋值给<code>rw</code>，如果是运行时修改方法，其实是对<code>rw</code>进行的操作。<code>ro</code>是编译时决定的原数据，<code>rw</code>是运行时产生的数据。</p>\n<div class=\"article-img\"><p><img src=\"https://s2.ax1x.com/2019/05/05/E0NOtU.jpg\" alt data-zoomable></p></div>\n<h2 id=\"SEL\">SEL<a href=\"post/iOS-runtime-node-2#SEL\"></a></h2><p>在<code>objc.h</code>中可以看到</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// An opaque type that represents a method selector.</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> objc_selector *SEL;</span><br></pre></td></tr></table></figure>\n<p>但是当我们继续点<code>objc_selector</code>时发现点不开了，我们可以对<code>SEL</code>进行打印</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SEL sel = <span class=\"keyword\">@selector</span>(test);</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"SEL = %s\"</span>, sel);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是结果</span></span><br><span class=\"line\">Runtime[<span class=\"number\">39704</span>:<span class=\"number\">1266711</span>] SEL = test</span><br></pre></td></tr></table></figure>\n<p>说白了SEL就是返回的方法名，而在iOS和MAC中 SEL就只是 一个 char *类型的字符串而已，可以简单的理解为</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> objc_selector &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">void</span> *sel_id;  </span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *sel_types;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">64</span> or ...];</span><br><span class=\"line\">&#125;; <span class=\"comment\">//这一点是猜测的, 在runtime的源码内没有找到具体的objc_selector定义</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"IMP\">IMP<a href=\"post/iOS-runtime-node-2#IMP\"></a></h2><p><code>IMP</code>的本质其实就是一个函数指针，其定义如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">id</span> _Nullable (*IMP)(<span class=\"keyword\">id</span> _Nonnull, SEL _Nonnull, ...);</span><br></pre></td></tr></table></figure>\n<p><code>IMP</code>默认接受两个参数<code>id</code>和<code>SEL</code>，id就是对象，也就是方法的调用者self，<code>SEL</code>是当前方法名。这和<code>objc_msgSend()</code>的函数传递的参数一样，也就是说发送消息后最终也是通过找到方法的<code>IMP</code>执行该方法。</p>\n<h3 id=\"获取IMP\">获取IMP<a href=\"post/iOS-runtime-node-2#获取IMP\"></a></h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (IMP)methodForSelector:(SEL)aSelector;</span><br><span class=\"line\">+ (IMP)instanceMethodForSelector:(SEL)aSelector;</span><br></pre></td></tr></table></figure>\n<p>通过定义在<code>NSObject</code>中的两个方法，可以根据传入的<code>SEL</code>获取到对应的<code>IMP</code>。</p>\n<p>当一个方法调用频率非常高时，我们可以直接获取到其<code>IMP</code>进行方法调用。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test *test = [[Test alloc] init];</span><br><span class=\"line\"><span class=\"keyword\">void</span> (*function)(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd) = (<span class=\"keyword\">void</span> (*)(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL _cmd))[test methodForSelector:<span class=\"keyword\">@selector</span>(test)];</span><br><span class=\"line\">    </span><br><span class=\"line\">function(test, <span class=\"keyword\">@selector</span>(test));</span><br></pre></td></tr></table></figure>\n<p>在获取和调用<code>IMP</code>的时候注意每个方法都是有两个默认参数的，在声明和调用的时候都要带上这两个默认参数。</p>\n<h3 id=\"IMP-with-block\">IMP with block<a href=\"post/iOS-runtime-node-2#IMP-with-block\"></a></h3><p>通过<code>Runtime</code>的<code>API</code>，可以将<code>block</code>转为<code>IMP</code>调用。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IMP function = imp_implementationWithBlock(^(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL selector) &#123;</span><br><span class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"block test\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">function();</span><br></pre></td></tr></table></figure>\n<p>再通过方法交换，替换掉原方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test *test = [[Test alloc] init];</span><br><span class=\"line\">[test test];</span><br><span class=\"line\">    </span><br><span class=\"line\">IMP function = imp_implementationWithBlock(^(<span class=\"keyword\">id</span> <span class=\"keyword\">self</span>, SEL selector) &#123;</span><br><span class=\"line\">   <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"block test\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *type = sel_getName(<span class=\"keyword\">@selector</span>(test));</span><br><span class=\"line\">class_replaceMethod([Test <span class=\"keyword\">class</span>], <span class=\"keyword\">@selector</span>(test), function, type);</span><br><span class=\"line\">    </span><br><span class=\"line\">[test test];</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里是结果</span></span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-05</span><span class=\"number\">-07</span> <span class=\"number\">09</span>:<span class=\"number\">47</span>:<span class=\"number\">09.052653</span>+<span class=\"number\">0800</span> Runtime[<span class=\"number\">60410</span>:<span class=\"number\">1991014</span>] test</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-05</span><span class=\"number\">-07</span> <span class=\"number\">09</span>:<span class=\"number\">47</span>:<span class=\"number\">09.052758</span>+<span class=\"number\">0800</span> Runtime[<span class=\"number\">60410</span>:<span class=\"number\">1991014</span>] block test</span><br></pre></td></tr></table></figure>\n<h2 id=\"Method\">Method<a href=\"post/iOS-runtime-node-2#Method\"></a></h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> method_t *Method;</span><br></pre></td></tr></table></figure>\n<p><code>Method</code>用来表示方法，其中包含<code>SEL</code>和<code>IMP</code>，下面是<code>Method</code>结构体的定义</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> method_t &#123;</span><br><span class=\"line\">    SEL name;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *types;</span><br><span class=\"line\">    MethodListIMP imp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> SortBySELAddress :</span><br><span class=\"line\">        public std::binary_function&lt;<span class=\"keyword\">const</span> method_t&amp;,</span><br><span class=\"line\">                                    <span class=\"keyword\">const</span> method_t&amp;, <span class=\"keyword\">bool</span>&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> operator() (<span class=\"keyword\">const</span> method_t&amp; lhs,</span><br><span class=\"line\">                         <span class=\"keyword\">const</span> method_t&amp; rhs)</span><br><span class=\"line\">        &#123; <span class=\"keyword\">return</span> lhs.name &lt; rhs.name; &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>MethodListIMP</code>其实就是<code>IMP</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using MethodListIMP = IMP;</span><br></pre></td></tr></table></figure>\n<p>一个方法有对应的<code>SEL</code>和<code>IMP</code>，我们通过方法交换其实就是改变了<code>IMP</code>所指向的函数。</p>\n<h2 id=\"Property\">Property<a href=\"post/iOS-runtime-node-2#Property\"></a></h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> property_t *objc_property_t;</span><br></pre></td></tr></table></figure>\n<p>在<code>Runtime</code>中定义了属性的结构体，用来表示对象中定义的属性（用<code>@property</code>修饰）。对象的属性为<code>property_t</code>类型，其结构体声明如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> property_t &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *attributes;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在<code>Runtime</code>中提供有关<code>Property</code>的方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取类的属性列表</span></span><br><span class=\"line\">objc_property_t _Nonnull * _Nullable</span><br><span class=\"line\">class_copyPropertyList(Class _Nullable cls, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> * _Nullable outCount)</span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.5</span>, <span class=\"number\">2.0</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取协议的属性列表</span></span><br><span class=\"line\">objc_property_t _Nonnull * _Nullable</span><br><span class=\"line\">protocol_copyPropertyList(Protocol * _Nonnull proto,</span><br><span class=\"line\">                          <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> * _Nullable outCount)</span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.5</span>, <span class=\"number\">2.0</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入Class和property name获取对应property_t结构体</span></span><br><span class=\"line\">objc_property_t _Nullable</span><br><span class=\"line\">class_getProperty(Class _Nullable cls, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _Nonnull name)</span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.5</span>, <span class=\"number\">2.0</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取协议中的属性结构体</span></span><br><span class=\"line\">objc_property_t _Nullable</span><br><span class=\"line\">protocol_getProperty(Protocol * _Nonnull proto,</span><br><span class=\"line\">                     <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * _Nonnull name,</span><br><span class=\"line\">                     <span class=\"built_in\">BOOL</span> isRequiredProperty, <span class=\"built_in\">BOOL</span> isInstanceProperty)</span><br><span class=\"line\">    OBJC_AVAILABLE(<span class=\"number\">10.5</span>, <span class=\"number\">2.0</span>, <span class=\"number\">9.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>);</span><br></pre></td></tr></table></figure>\n","prev":{"title":"Runtime(三) 对象的初始化过程","slug":"iOS-runtime-node-3"},"next":{"title":"Runtime(一) 介绍","slug":"iOS-runtime-node-1"},"link":"https://vesincc.github.io/post/iOS-runtime-node-2/","toc":[{"title":"Runtime 基础定义","id":"Runtime-基础定义","index":"1","children":[{"title":"id","id":"id","index":"1.1"},{"title":"Class","id":"Class","index":"1.2","children":[{"title":"class_rw_t和class_ro_t","id":"class-rw-t和class-ro-t","index":"1.2.1"}]},{"title":"SEL","id":"SEL","index":"1.3"},{"title":"IMP","id":"IMP","index":"1.4","children":[{"title":"获取IMP","id":"获取IMP","index":"1.4.1"},{"title":"IMP with block","id":"IMP-with-block","index":"1.4.2"}]},{"title":"Method","id":"Method","index":"1.5"},{"title":"Property","id":"Property","index":"1.6"}]}],"reward":true,"copyright":{"custom":"本文遵守 CC BY-NC-ND 4.0 请保持转载后文章内容的完整，以及文章出处。本人保留所有版权相关权利。"}}