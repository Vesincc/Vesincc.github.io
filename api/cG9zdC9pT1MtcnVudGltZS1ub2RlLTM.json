{"title":"Runtime(三) 对象的初始化过程","date":"2019-05-08T02:11:51.000Z","slug":"iOS-runtime-node-3","comments":true,"tags":["Runtime"],"categories":["iOS"],"updated":"2019-07-10T03:35:32.000Z","content":"<h2 id=\"对象的初始化过程\">对象的初始化过程<a href=\"post/iOS-runtime-node-3#对象的初始化过程\"></a></h2><p>在我们平常开发中经常会用到各种各样的对象，而我们在使用对象之前一般会使用<code>alloc + init</code>对其进行初始化操作:</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Test</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">int</span> number;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>假定有一个<code>Test</code>有一个成员变量<code>number</code>，我们对其进行初始化一般会这样写：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test *test = [[Test alloc] init];</span><br><span class=\"line\">test.number = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"number -&gt; %d\"</span>, test.number);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是输出</span></span><br><span class=\"line\">Runtime[<span class=\"number\">72853</span>:<span class=\"number\">3239748</span>] number -&gt; <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n<p>但是假如我们把<code>alloc</code>和<code>init</code>分开用，分别探究两个函数到底做了什么事呢？</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假如这样写会不会出问题呢？没有问题那会输出什么呢？</span></span><br><span class=\"line\">Test *test = [Test alloc];</span><br><span class=\"line\">test.number = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"number -&gt; %d\"</span>, </span><br><span class=\"line\">test.number);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是输出</span></span><br><span class=\"line\">Runtime[<span class=\"number\">73013</span>:<span class=\"number\">3275004</span>] number -&gt; <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n<p>看起来感觉和我们平常的写法输出结果是一样的，那再试试这样呢？</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test *test = [Test alloc];</span><br><span class=\"line\">test.number = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"1 :number -&gt; %d\"</span>, test.number);</span><br><span class=\"line\">test = [test init];</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"2 :number -&gt; %d\"</span>, test.number);</span><br><span class=\"line\">test.number = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"3 :number -&gt; %d\"</span>, test.number);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是输出</span></span><br><span class=\"line\">Runtime[<span class=\"number\">73041</span>:<span class=\"number\">3279104</span>] <span class=\"number\">1</span> :number -&gt; <span class=\"number\">9</span></span><br><span class=\"line\">Runtime[<span class=\"number\">73041</span>:<span class=\"number\">3279104</span>] <span class=\"number\">2</span> :number -&gt; <span class=\"number\">9</span></span><br><span class=\"line\">Runtime[<span class=\"number\">73041</span>:<span class=\"number\">3279104</span>] <span class=\"number\">3</span> :number -&gt; <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>看起来好像<code>init</code>并没有发挥什么作用，貌似仅仅只执行完<code>alloc</code>就完成了初始化。那么<code>alloc</code>又对对象做了什么操作的？<code>init</code>的作用又是什么呢？</p>\n<p><code>alloc</code>和<code>init</code>都是<code>NSObject</code>提供给我们的函数，在<code>NSObject.h</code>中可以看到关于<code>NSObject</code>的定义，其中我们可以找到<code>alloc</code>和<code>init</code>的声明</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">instancetype</span>)alloc OBJC_SWIFT_UNAVAILABLE(<span class=\"string\">\"use object initializers instead\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">instancetype</span>)init</span><br><span class=\"line\"><span class=\"meta\">#if NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER</span></span><br><span class=\"line\">    <span class=\"built_in\">NS_DESIGNATED_INITIALIZER</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\">    ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"alloc\">alloc<a href=\"post/iOS-runtime-node-3#alloc\"></a></h3><p>我们看一下<code>alloc</code>的实现</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">id</span>)alloc &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _objc_rootAlloc(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>里面直接调用了<code>rootAlloc</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">id</span></span><br><span class=\"line\">_objc_rootAlloc(Class cls)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callAlloc(cls, <span class=\"literal\">false</span><span class=\"comment\">/*checkNil*/</span>, <span class=\"literal\">true</span><span class=\"comment\">/*allocWithZone*/</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>rootAlloc</code>调用了<code>callAlloc</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> ALWAYS_INLINE <span class=\"keyword\">id</span></span><br><span class=\"line\">callAlloc(Class cls, <span class=\"keyword\">bool</span> checkNil, <span class=\"keyword\">bool</span> allocWithZone=<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slowpath(checkNil &amp;&amp; !cls)) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#if __OBJC2__</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fastpath(!cls-&gt;ISA()-&gt;hasCustomAWZ())) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// No alloc/allocWithZone implementation. Go straight to the allocator.</span></span><br><span class=\"line\">        <span class=\"comment\">// fixme store hasCustomAWZ in the non-meta class and </span></span><br><span class=\"line\">        <span class=\"comment\">// add it to canAllocFast's summary</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fastpath(cls-&gt;canAllocFast())) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// No ctors, raw isa, etc. Go straight to the metal.</span></span><br><span class=\"line\">            <span class=\"keyword\">bool</span> dtor = cls-&gt;hasCxxDtor();</span><br><span class=\"line\">            <span class=\"keyword\">id</span> obj = (<span class=\"keyword\">id</span>)calloc(<span class=\"number\">1</span>, cls-&gt;bits.fastInstanceSize());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (slowpath(!obj)) <span class=\"keyword\">return</span> callBadAllocHandler(cls);</span><br><span class=\"line\">            obj-&gt;initInstanceIsa(cls, dtor);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Has ctor or raw isa or something. Use the slower path.</span></span><br><span class=\"line\">            <span class=\"keyword\">id</span> obj = class_createInstance(cls, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (slowpath(!obj)) <span class=\"keyword\">return</span> callBadAllocHandler(cls);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// No shortcuts available.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (allocWithZone) <span class=\"keyword\">return</span> [cls allocWithZone:<span class=\"literal\">nil</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [cls alloc];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里进入了一个判断。点进判断条件我们会发现<code>canAllocFast</code>是直接反回的<code>false</code>，也就是说初始化是走的<code>else</code>里面的内容，调用了<code>class_createInstance</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">id</span> </span><br><span class=\"line\">class_createInstance(Class cls, size_t extraBytes)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _class_createInstanceFromZone(cls, extraBytes, <span class=\"literal\">nil</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> __attribute__((always_inline)) </span><br><span class=\"line\"><span class=\"keyword\">id</span></span><br><span class=\"line\">_class_createInstanceFromZone(Class cls, size_t extraBytes, <span class=\"keyword\">void</span> *zone, </span><br><span class=\"line\">                              <span class=\"keyword\">bool</span> cxxConstruct = <span class=\"literal\">true</span>, </span><br><span class=\"line\">                              size_t *outAllocatedSize = <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!cls) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    assert(cls-&gt;isRealized());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Read class's info bits all at once for performance</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> hasCxxCtor = cls-&gt;hasCxxCtor();</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> hasCxxDtor = cls-&gt;hasCxxDtor();</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> fast = cls-&gt;canAllocNonpointer();</span><br><span class=\"line\"></span><br><span class=\"line\">    size_t size = cls-&gt;instanceSize(extraBytes);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (outAllocatedSize) *outAllocatedSize = size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">id</span> obj;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!zone  &amp;&amp;  fast) &#123;</span><br><span class=\"line\">        obj = (<span class=\"keyword\">id</span>)calloc(<span class=\"number\">1</span>, size);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">        obj-&gt;initInstanceIsa(cls, hasCxxDtor);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (zone) &#123;</span><br><span class=\"line\">            obj = (<span class=\"keyword\">id</span>)malloc_zone_calloc ((malloc_zone_t *)zone, <span class=\"number\">1</span>, size);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            obj = (<span class=\"keyword\">id</span>)calloc(<span class=\"number\">1</span>, size);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Use raw pointer isa on the assumption that they might be </span></span><br><span class=\"line\">        <span class=\"comment\">// doing something weird with the zone or RR.</span></span><br><span class=\"line\">        obj-&gt;initIsa(cls);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cxxConstruct &amp;&amp; hasCxxCtor) &#123;</span><br><span class=\"line\">        obj = _objc_constructOrFree(obj, cls);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们按着执行顺序一步一步点进来发现<code>alloc</code>函数最终到了<code>_class_createInstanceFromZone</code>方法，在这个方法中开辟了内存空间，并且在这个方法结束时返回了对象。</p>\n<p>开辟内存的时候会计算内存空间的大小</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">size_t instanceSize(size_t extraBytes) &#123;</span><br><span class=\"line\">   size_t size = alignedInstanceSize() + extraBytes;</span><br><span class=\"line\">   <span class=\"comment\">// CF requires all objects be at least 16 bytes.</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (size &lt; <span class=\"number\">16</span>) size = <span class=\"number\">16</span>;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">uint32_t alignedInstanceSize() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> word_align(unalignedInstanceSize());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> uint32_t word_align(uint32_t x) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x + WORD_MASK) &amp; ~WORD_MASK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#ifdef __LP64__</span></span><br><span class=\"line\"><span class=\"meta\">#   define WORD_SHIFT 3UL</span></span><br><span class=\"line\"><span class=\"meta\">#   define WORD_MASK 7UL</span></span><br><span class=\"line\"><span class=\"meta\">#   define WORD_BITS 64</span></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\"><span class=\"meta\">#   define WORD_SHIFT 2UL</span></span><br><span class=\"line\"><span class=\"meta\">#   define WORD_MASK 3UL</span></span><br><span class=\"line\"><span class=\"meta\">#   define WORD_BITS 32</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br></pre></td></tr></table></figure>\n<p>这里我们可以看到，在计算内存大小的时候会进行字节对齐，这里的字节对齐是通过<code>(x + WORD_MASK) &amp; ~WORD_MASK</code>来实现的。通过宏定义可以看到，在64位操作系统上进行的是8字节对齐。而在32位机上是进行4字节对齐的。</p>\n<p>当进行字节对齐后的大小如果小于16字节，都是直接等于16字节的，所以OC对象所占的最小内存空间就是16字节。</p>\n<p>在<code>lldb</code>调试下，我们可以使用<code>memeory read</code>查看对象内存。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lldb</span></span><br><span class=\"line\">(lldb) p obj</span><br><span class=\"line\">(<span class=\"built_in\">NSObject</span> *) $<span class=\"number\">0</span> = <span class=\"number\">0x00006000003106e0</span></span><br><span class=\"line\">(lldb) memory read <span class=\"number\">0x00006000003106e0</span></span><br><span class=\"line\"><span class=\"number\">0x6000003106e0</span>: c8 ce <span class=\"number\">84</span> <span class=\"number\">03</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span></span><br></pre></td></tr></table></figure>\n<p>可以发现前8字节存储<code>isa</code>指针，而后面8字节都是0，但是整个对象还是占据了16个字节。</p>\n<div class=\"article-img\"><p><img src=\"https://s2.ax1x.com/2019/05/08/E61VxJ.jpg\" alt data-zoomable></p></div>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Test</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">int</span> number;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>一个<code>Test</code>对象占多少内存呢？</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test *test = [[Test alloc] init];</span><br><span class=\"line\">test.number = <span class=\"number\">1</span>;</span><br><span class=\"line\">test.size = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lldb</span></span><br><span class=\"line\">(lldb) p test</span><br><span class=\"line\">(Test *) $<span class=\"number\">0</span> = <span class=\"number\">0x000060000223f0c0</span></span><br><span class=\"line\">(lldb) memory read <span class=\"number\">0x000060000223f0c0</span></span><br><span class=\"line\"><span class=\"number\">0x60000223f0c0</span>: <span class=\"number\">58</span> af <span class=\"number\">03</span> <span class=\"number\">07</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">02</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span></span><br></pre></td></tr></table></figure>\n<p>答案是16字节，两个<code>int</code>型占8字节，再加上<code>isa</code>所占8字节，而最低分配16字节刚好全部装下，所以是16字节。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">Test</span> : <span class=\"title\">NSObject</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">int</span> weight;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">int</span> number;</span><br><span class=\"line\"><span class=\"keyword\">@property</span> (<span class=\"keyword\">nonatomic</span>, <span class=\"keyword\">assign</span>) <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>那这样的一个<code>Test</code>对象又占多少内存呢？</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test *test = [[Test alloc] init];</span><br><span class=\"line\">test.number = <span class=\"number\">1</span>;</span><br><span class=\"line\">test.size = <span class=\"number\">2</span>;</span><br><span class=\"line\">test.weight = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lldb</span></span><br><span class=\"line\">(lldb) p test</span><br><span class=\"line\">(Test *) $<span class=\"number\">0</span> = <span class=\"number\">0x00006000025b6fa0</span></span><br><span class=\"line\">(lldb) memory read <span class=\"number\">0x00006000025b6fa0</span></span><br><span class=\"line\"><span class=\"number\">0x6000025b6fa0</span>: c8 <span class=\"number\">4</span>f c1 <span class=\"number\">07</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">03</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  </span><br><span class=\"line\"><span class=\"number\">0x6000025b6fb0</span>: <span class=\"number\">02</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span></span><br></pre></td></tr></table></figure>\n<p>32字节，这里涉及到内存对齐。具体处理是在<code>calloc</code>函数中进行的，而<code>calloc</code>函数的源码在<a href=\"https://opensource.apple.com/tarballs/libmalloc/\" target=\"_blank\" rel=\"noopener\">libmalloc</a>中</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> *</span><br><span class=\"line\">calloc(size_t num_items, size_t size)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *retval;</span><br><span class=\"line\">\tretval = malloc_zone_calloc(default_zone, num_items, size);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (retval == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\terrno = ENOMEM;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retval;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> *</span><br><span class=\"line\">malloc_zone_calloc(malloc_zone_t *zone, size_t num_items, size_t size)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *ptr;</span><br><span class=\"line\">\tsize_t alloc_size;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (malloc_check_start &amp;&amp; (malloc_check_counter++ &gt;= malloc_check_start)) &#123;</span><br><span class=\"line\">\t\tinternal_check();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (os_mul_overflow(num_items, size, &amp;alloc_size) || alloc_size &gt; MALLOC_ABSOLUTE_MAX_SIZE)&#123;</span><br><span class=\"line\">\t\terrno = ENOMEM;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tptr = zone-&gt;calloc(zone, num_items, size);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (malloc_logger) &#123;</span><br><span class=\"line\">\t\tmalloc_logger(MALLOC_LOG_TYPE_ALLOCATE | MALLOC_LOG_TYPE_HAS_ZONE | MALLOC_LOG_TYPE_CLEARED, (uintptr_t)zone,</span><br><span class=\"line\">\t\t\t\t(uintptr_t)(num_items * size), <span class=\"number\">0</span>, (uintptr_t)ptr, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ptr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#define NANO_MAX_SIZE\t\t\t256 /* Buckets sized &#123;16, 32, 48, 64, 80, 96, 112, ...&#125; */</span></span><br></pre></td></tr></table></figure>\n<p>操作系统内部有一套规则，这里是16的倍数，而操作系统再此基础上访问速度最快。所以当需要20字节内存的时候，直接创建了32字节的空间。</p>\n<p>再使用<code>calloc</code>分配完空间后，初始化<code>isa</code>为类对象。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> </span><br><span class=\"line\">objc_object::initInstanceIsa(Class cls, <span class=\"keyword\">bool</span> hasCxxDtor)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    assert(!cls-&gt;instancesRequireRawIsa());</span><br><span class=\"line\">    assert(hasCxxDtor == cls-&gt;hasCxxDtor());</span><br><span class=\"line\"></span><br><span class=\"line\">    initIsa(cls, <span class=\"literal\">true</span>, hasCxxDtor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> </span><br><span class=\"line\">objc_object::initIsa(Class cls, <span class=\"keyword\">bool</span> nonpointer, <span class=\"keyword\">bool</span> hasCxxDtor) </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">    assert(!isTaggedPointer()); </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!nonpointer) &#123;</span><br><span class=\"line\">        isa.cls = cls;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        assert(!DisableNonpointerIsa);</span><br><span class=\"line\">        assert(!cls-&gt;instancesRequireRawIsa());</span><br><span class=\"line\"></span><br><span class=\"line\">        isa_t newisa(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#if SUPPORT_INDEXED_ISA</span></span><br><span class=\"line\">        assert(cls-&gt;classArrayIndex() &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">        newisa.bits = ISA_INDEX_MAGIC_VALUE;</span><br><span class=\"line\">        <span class=\"comment\">// isa.magic is part of ISA_MAGIC_VALUE</span></span><br><span class=\"line\">        <span class=\"comment\">// isa.nonpointer is part of ISA_MAGIC_VALUE</span></span><br><span class=\"line\">        newisa.has_cxx_dtor = hasCxxDtor;</span><br><span class=\"line\">        newisa.indexcls = (uintptr_t)cls-&gt;classArrayIndex();</span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\">        newisa.bits = ISA_MAGIC_VALUE;</span><br><span class=\"line\">        <span class=\"comment\">// isa.magic is part of ISA_MAGIC_VALUE</span></span><br><span class=\"line\">        <span class=\"comment\">// isa.nonpointer is part of ISA_MAGIC_VALUE</span></span><br><span class=\"line\">        newisa.has_cxx_dtor = hasCxxDtor;</span><br><span class=\"line\">        newisa.shiftcls = (uintptr_t)cls &gt;&gt; <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// This write must be performed in a single store in some cases</span></span><br><span class=\"line\">        <span class=\"comment\">// (for example when realizing a class because other threads</span></span><br><span class=\"line\">        <span class=\"comment\">// may simultaneously try to use the class).</span></span><br><span class=\"line\">        <span class=\"comment\">// fixme use atomics here to guarantee single-store and to</span></span><br><span class=\"line\">        <span class=\"comment\">// guarantee memory order w.r.t. the class index table</span></span><br><span class=\"line\">        <span class=\"comment\">// ...but not too atomic because we don't want to hurt instantiation</span></span><br><span class=\"line\">        isa = newisa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"init\">init<a href=\"post/iOS-runtime-node-3#init\"></a></h3><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">id</span>)init &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _objc_rootInit(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">id</span></span><br><span class=\"line\">_objc_rootInit(<span class=\"keyword\">id</span> obj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// In practice, it will be hard to rely on this function.</span></span><br><span class=\"line\">    <span class=\"comment\">// Many classes do not properly chain -init calls.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据源码可知<code>init</code>调用了<code>_objc_rootInit</code>，但是<code>_objc_rootInit</code>却直接返回了<code>obj</code>。</p>\n<h2 id=\"new\">new<a href=\"post/iOS-runtime-node-3#new\"></a></h2><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (<span class=\"keyword\">id</span>)new &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [callAlloc(<span class=\"keyword\">self</span>, <span class=\"literal\">false</span><span class=\"comment\">/*checkNil*/</span>) init];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过<code>new</code>函数创建对象其实也是一样的，内部通过<code>callAlloc</code>函数执行创建操作，最后也调用了<code>init</code>。所以调用<code>new</code>函数初始化对象等同于<code>alloc + init</code>的调用。</p>\n<h2 id=\"dealloc\">dealloc<a href=\"post/iOS-runtime-node-3#dealloc\"></a></h2><p>当对象销毁时，运行时环境会自动调用<code>NSObject</code>的<code>dealloc</code>方法销毁对象。<br><code>dealloc</code>最后会调到<code>objc_object::rootDealloc()</code>方法执行一些释放前的操作</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">objc_object::rootDealloc()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isTaggedPointer()) <span class=\"keyword\">return</span>;  <span class=\"comment\">// fixme necessary?</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fastpath(isa.nonpointer  &amp;&amp;  </span><br><span class=\"line\">                 !isa.weakly_referenced  &amp;&amp;  </span><br><span class=\"line\">                 !isa.has_assoc  &amp;&amp;  </span><br><span class=\"line\">                 !isa.has_cxx_dtor  &amp;&amp;  </span><br><span class=\"line\">                 !isa.has_sidetable_rc))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        assert(!sidetable_present());</span><br><span class=\"line\">        free(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        object_dispose((<span class=\"keyword\">id</span>)<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是<code>ARC</code>环境，并且当前对象定义了实例变量，才会进入<code>else</code>中执行<code>object_dispose()</code>方法，上面的判断表示当前对象没有实例变量，直接<code>free</code>释放内存空间。</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">id</span> </span><br><span class=\"line\">object_dispose(<span class=\"keyword\">id</span> obj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    objc_destructInstance(obj);    </span><br><span class=\"line\">    free(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> *objc_destructInstance(<span class=\"keyword\">id</span> obj) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (obj) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Read all of the flags at once for performance.</span></span><br><span class=\"line\">        <span class=\"keyword\">bool</span> cxx = obj-&gt;hasCxxDtor();</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> assoc = obj-&gt;hasAssociatedObjects();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// This order is important.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cxx) object_cxxDestruct(obj);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (assoc) _object_remove_assocations(obj);</span><br><span class=\"line\">        obj-&gt;clearDeallocating();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在objc_destructInstance主要做了3件事：</p>\n<ol>\n<li>如果对象有C++析构函数，调用析构函数，在内部还会进行对应的<code>release</code>操作。</li>\n<li>移除当前对象所有的引用。</li>\n<li>进行<code>clear</code>操作 </li>\n</ol>\n","prev":{"title":"Runtime(四) OC的消息机制","slug":"iOS-runtime-node-4"},"next":{"title":"Runtime(二) 基础定义","slug":"iOS-runtime-node-2"},"link":"https://vesincc.github.io/post/iOS-runtime-node-3/","toc":[{"title":"对象的初始化过程","id":"对象的初始化过程","index":"1","children":[{"title":"alloc","id":"alloc","index":"1.1"},{"title":"init","id":"init","index":"1.2"}]},{"title":"new","id":"new","index":"2"},{"title":"dealloc","id":"dealloc","index":"3"}],"reward":true,"copyright":{"custom":"本文遵守 CC BY-NC-ND 4.0 请保持转载后文章内容的完整，以及文章出处。本人保留所有版权相关权利。"}}