{"title":"Runtime(五) 加载过程","date":"2019-05-13T02:42:05.000Z","slug":"iOS-runtime-node-5","comments":true,"tags":["Runtime"],"categories":["iOS"],"updated":"2019-07-10T03:35:32.000Z","content":"<h2 id=\"程序加载过程\">程序加载过程<a href=\"post/iOS-runtime-node-5#程序加载过程\"></a></h2><h3 id=\"动态库\">动态库<a href=\"post/iOS-runtime-node-5#动态库\"></a></h3><p>在 iOS 程序中会用到很多的系统动态库，这些动态库都是动态加载的，所有的 iOS 程序共用一套系统动态库，在程序开始运行时才会链接动态库。</p>\n<p>除了在项目中<code>Linked Frameworks and Libraries</code>出现的动态库之外，还会有一些隐式的动态库，例如：<code>Runtime</code>所属的<code>libobjc.dyld</code>和<code>libSystem.dyld</code>，在<code>libSystem.dyld</code>中包含<code>libdispatch</code>、<code>libsystem_c</code>、<code>libsystem_blocks</code>等。</p>\n<p>使用动态库的优点：</p>\n<ol>\n<li>防止重复，<code>iOS</code>系统中所有的<code>APP</code>都公用一套系统动态库，防止重复的内存占用。</li>\n<li>减少包体积，系统动态库内置于<code>iOS</code>系统文件中，打包时不必将这部分代码打入<code>APP</code>的包中，减少<code>APP</code>的体积。</li>\n<li>动态性，动态库是随<code>iOS</code>版本更新而更新的，系统更新后将便可以将新的动态库替换掉旧版本动态库。</li>\n</ol>\n<h3 id=\"程序加载过程-1\">程序加载过程<a href=\"post/iOS-runtime-node-5#程序加载过程-1\"></a></h3><p>一个iOS程序的<code>main()</code>函数位于<code>main.m</code>中，也就是我们所熟知的程序入口。但是在<code>main()</code>函数之前到底发生了声么呢？程序是如何被加载的呢？。</p>\n<ol>\n<li>系统先读取APP的可执行文件(Mach-O)，从里面获得<code>dyld</code>的路径，然后加载<code>dyld</code></li>\n<li><code>dyld</code>去初始化运行时环境，开启缓存策略，加载相关依赖库，并对这些库进行链接，最后调用每个依赖库的初始化方法，在这一步，<code>runtime</code>被初始化。</li>\n<li>当所有依赖库的初始化后，程序可执行文件进行初始化，在这时<code>runtime</code>会对项目中所有的类进行类结构体初始化，并调用所有的<code>load</code>方法。</li>\n<li><code>dyld</code>返回<code>main</code>函数地址</li>\n<li><code>main</code>函数被调用，并执行业务逻辑代码</li>\n</ol>\n<h4 id=\"dyld简介\">dyld简介<a href=\"post/iOS-runtime-node-5#dyld简介\"></a></h4><p><code>dyle(the dynamic link editor)</code>是苹果的动态链接器，是苹果操作系统的一个重要组成部分，在系统内核做好程序准备工作后，交由<code>dyld</code>负责余下的工作。</p>\n<p><a href=\"http://opensource.apple.com/tarballs/dyld\" target=\"_blank\" rel=\"noopener\">dyld下载地址</a></p>\n<h4 id=\"共享缓存机制\">共享缓存机制<a href=\"post/iOS-runtime-node-5#共享缓存机制\"></a></h4><p>在<code>iOS</code>系统中，每个程序所依赖的动态库都需要通过<code>dyld</code>一个一个加载到内存中，但是有很多的系统库几乎是每个程序都会用到的，如果在每个程序运行的时候都去重复加载这些库，势必会造成很大的不必要的系统开销，因此，为了优化启动速度和提高系统性能，提出了共享缓存机制</p>\n<p>所有默认的动态链接库被合并成一个大的缓存文件放到<code>/System/Library/Caches/com.apple.dyld/</code>目录下，并按不同的架构分别保存。</p>\n<h4 id=\"dyld加载过程\">dyld加载过程<a href=\"post/iOS-runtime-node-5#dyld加载过程\"></a></h4><p>我们对<code>main()</code>函数下断点，然后运行，调用栈如下:</p>\n<div class=\"article-img\"><p><img src=\"https://s2.ax1x.com/2019/05/23/VCHneO.jpg\" alt data-zoomable></p></div>\n<p><code>main()</code>函数之前只有一个libdyld.dylib`start的入口</p>\n<p>在<code>dyld</code>源码的<code>dyldStartup.s</code>中找到了<code>__dyld_start</code>函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#if __arm__</span><br><span class=\"line\">\t.data</span><br><span class=\"line\">\t.align 2</span><br><span class=\"line\">__dyld_start_static_picbase: </span><br><span class=\"line\">\t.long\tL__dyld_start_picbase</span><br><span class=\"line\"></span><br><span class=\"line\">\t.text</span><br><span class=\"line\">\t.align 2</span><br><span class=\"line\">\t.globl\t_stub_binding_helper</span><br><span class=\"line\">_stub_binding_helper:</span><br><span class=\"line\">\tb\t_stub_binding_helper_interface</span><br><span class=\"line\">\tnop </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t.globl\t_dyld_func_lookup</span><br><span class=\"line\">_dyld_func_lookup:</span><br><span class=\"line\">\tb       _branch_to_lookupDyldFunction</span><br><span class=\"line\">\tnop</span><br><span class=\"line\">\t</span><br><span class=\"line\">_offset_to_dyld_all_image_infos:</span><br><span class=\"line\">\t.long\t_dyld_all_image_infos - . + 0x1010 </span><br><span class=\"line\">\t.long\t0</span><br><span class=\"line\">\t# space for future stable entry points</span><br><span class=\"line\">\t.space\t16</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">\t.text</span><br><span class=\"line\">\t.align 2</span><br><span class=\"line\">__dyld_start:</span><br><span class=\"line\">\t// call dyldbootstrap::start(app_mh, argc, argv, slide)         </span><br><span class=\"line\"></span><br><span class=\"line\">\tldr\tr3, L__dyld_start_picbase_ptr</span><br><span class=\"line\">L__dyld_start_picbase:</span><br><span class=\"line\">\tsub\tr0, pc, #8\t// load actual PC</span><br><span class=\"line\">\tldr\tr3, [r0, r3]\t// load expected PC</span><br><span class=\"line\">\tsub\tr3, r0, r3\t// r3 = slide</span><br><span class=\"line\"></span><br><span class=\"line\">\tldr\tr0, [sp]\t// r0 = mach_header</span><br><span class=\"line\">\tldr\tr1, [sp, #4]\t// r1 = argc</span><br><span class=\"line\">\tadd\tr2, sp, #8\t// r2 = argv</span><br><span class=\"line\"></span><br><span class=\"line\">\tmov\tr8, sp\t\t// save stack pointer</span><br><span class=\"line\">\tbic     sp, sp, #7\t// force 8-byte alignment</span><br><span class=\"line\">       </span><br><span class=\"line\">\tbl\t__ZN13dyldbootstrap5startEPK12macho_headeriPPKcl</span><br><span class=\"line\">       </span><br><span class=\"line\">\t// clean up stack and jump to result</span><br><span class=\"line\">\tadd\tsp, r8, #4\t// remove the mach_header argument.</span><br><span class=\"line\">\tbx\tr0\t\t// jump to the program&apos;s entry point</span><br><span class=\"line\"></span><br><span class=\"line\">\t.align 2</span><br><span class=\"line\">L__dyld_start_picbase_ptr:</span><br><span class=\"line\">\t.long\t__dyld_start_static_picbase-L__dyld_start_picbase</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t.text</span><br><span class=\"line\">\t.align 2</span><br><span class=\"line\">_branch_to_lookupDyldFunction:</span><br><span class=\"line\">\t// arm has no &quot;bx label&quot; instruction, so need this island in case lookupDyldFunction() is in thumb</span><br><span class=\"line\">\tldr ip, L2</span><br><span class=\"line\">L1:\tldr pc, [pc, ip]</span><br><span class=\"line\">L2:\t.long   _lookupDyldFunction_ptr-8-L1</span><br><span class=\"line\">       </span><br><span class=\"line\"> \t.data</span><br><span class=\"line\">\t.align 2</span><br><span class=\"line\">_lookupDyldFunction_ptr:</span><br><span class=\"line\">\t.long\t__Z18lookupDyldFunctionPKcPm</span><br><span class=\"line\">\t</span><br><span class=\"line\">      </span><br><span class=\"line\">\t.text</span><br><span class=\"line\">\t.globl dyld_stub_binding_helper</span><br><span class=\"line\">dyld_stub_binding_helper:</span><br><span class=\"line\">\ttrap</span><br><span class=\"line\"></span><br><span class=\"line\">L_end:</span><br><span class=\"line\">#endif /* __arm__ */</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__dyld_start:</span><br><span class=\"line\">\t// call dyldbootstrap::start(app_mh, argc, argv, slide)</span><br></pre></td></tr></table></figure>\n<p>根据注释可以知道是跳转<code>dyldbootstrap::start()</code>函数</p>\n<p>该函数在<code>dyldInitialization.cpp</code>中</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">uintptr_t</span> start(<span class=\"keyword\">const</span> struct macho_header* appsMachHeader, <span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* argv[], <span class=\"keyword\">intptr_t</span> slide)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// _mh_dylinker_header is magic symbol defined by static linker (ld), see &lt;mach-o/ldsyms.h&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">// 读取macho文件的头部信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">macho_header</span>* <span class=\"title\">dyldsMachHeader</span> =  (<span class=\"title\">const</span> <span class=\"title\">struct</span> <span class=\"title\">macho_header</span>*)(((<span class=\"title\">char</span>*)&amp;_<span class=\"title\">mh_dylinker_header</span>)+<span class=\"title\">slide</span>);</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// if kernel had to slide dyld, we need to fix up load sensitive locations</span></span><br><span class=\"line\">\t<span class=\"comment\">// we have to do this before using any global variables</span></span><br><span class=\"line\">    <span class=\"comment\">// 滑块，设置偏移量，用于重定位</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( slide != <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">\t\trebaseDyld(dyldsMachHeader, slide);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">uintptr_t</span> appsSlide = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"comment\">// enable C++ exceptions to work inside dyld</span></span><br><span class=\"line\">    <span class=\"comment\">// 针对偏移异常的监测</span></span><br><span class=\"line\">\tdyld_exceptions_init(dyldsMachHeader, slide);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// allow dyld to use mach messaging</span></span><br><span class=\"line\">    <span class=\"comment\">// 初始化machO文件</span></span><br><span class=\"line\">\tmach_init();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// set protection on segments (has to be done after mach_init)</span></span><br><span class=\"line\">    <span class=\"comment\">// 设置分段保护，这里的分段下面会介绍，属于machO文件格式</span></span><br><span class=\"line\">\tsegmentProtectDyld(dyldsMachHeader, slide);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// kernel sets up env pointer to be just past end of agv array</span></span><br><span class=\"line\">    <span class=\"comment\">// 环境变量指针</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>** envp = &amp;argv[argc+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// kernel sets up apple pointer to be just past end of envp array</span></span><br><span class=\"line\">    <span class=\"comment\">// 环境变量指针结束的设置</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>** apple = envp;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(*apple != <span class=\"literal\">NULL</span>) &#123; ++apple; &#125;</span><br><span class=\"line\">\t++apple;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// run all C++ initializers inside dyld</span></span><br><span class=\"line\">    <span class=\"comment\">// 在dyld中运行所有c++初始化器</span></span><br><span class=\"line\">\trunDyldInitializers(dyldsMachHeader, slide, argc, argv, envp, apple);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// if main executable was linked -pie, then randomize its load address</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果主可执行文件被链接-pie，那么随机分配它的加载地址</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( appsMachHeader-&gt;flags &amp; MH_PIE )</span><br><span class=\"line\">\t\tappsMachHeader = randomizeExecutableLoadAddress(appsMachHeader, envp, &amp;appsSlide);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// now that we are done bootstrapping dyld, call dyld's main</span></span><br><span class=\"line\">    <span class=\"comment\">// 传入头文件信息，偏移量等。调用dyld的自己的main函数（这里并不是APP的main函数）。</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dyld::_main(appsMachHeader, appsSlide, argc, argv, envp, apple);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>dyldbootstrap::start()</code>函数中做了许多<code>dyld</code>初始化相关工作，具体函数作用注释在上。</p>\n<p>初始化完成后调用了<code>dyld::_main()</code>函数</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uintptr_t</span><br><span class=\"line\">_main(<span class=\"keyword\">const</span> macho_header* mainExecutableMH, uintptr_t mainExecutableSlide, <span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* argv[], <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* envp[], <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* apple[])</span><br><span class=\"line\">&#123;\t</span><br><span class=\"line\"><span class=\"meta\">#ifdef ALTERNATIVE_LOGFILE</span></span><br><span class=\"line\">\tsLogfile = open(ALTERNATIVE_LOGFILE, O_WRONLY | O_CREAT | O_APPEND);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( sLogfile == <span class=\"number\">-1</span> ) &#123;</span><br><span class=\"line\">\t\tsLogfile = STDERR_FILENO;</span><br><span class=\"line\">\t\tdyld::log(<span class=\"string\">\"error opening alternate log file %s, errno = %d\\n\"</span>, ALTERNATIVE_LOGFILE, errno);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\">\t<span class=\"comment\">// 根据可执行文件头部，参数等设置上下文信息</span></span><br><span class=\"line\">\tsetContext(mainExecutableMH, argc, argv, envp, apple);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取可执行文件路径</span></span><br><span class=\"line\">    sExecPath = apple[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> ignoreEnvironmentVariables = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"meta\">#if __i386__</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( isRosetta() ) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// under Rosetta (x86 side)</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// When a 32-bit ppc program is run under emulation on an Intel processor,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// we want any i386 dylibs (e.g. any used by Rosetta) to not load in the shared region</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// because the shared region is being used by ppc dylibs</span></span><br><span class=\"line\">\t\tgLinkContext.sharedRegionMode = ImageLoader::kDontUseSharedRegion;</span><br><span class=\"line\">\t\tignoreEnvironmentVariables = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\">    <span class=\"comment\">// 将相对路径转换成绝对路径</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( sExecPath[<span class=\"number\">0</span>] != <span class=\"string\">'/'</span> ) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// have relative path, use cwd to make absolute</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> cwdbuff[MAXPATHLEN];</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span> ( getcwd(cwdbuff, MAXPATHLEN) != <span class=\"literal\">NULL</span> ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// maybe use static buffer to avoid calling malloc so early...</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span>* s = new <span class=\"keyword\">char</span>[strlen(cwdbuff) + strlen(sExecPath) + <span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t\tstrcpy(s, cwdbuff);</span><br><span class=\"line\">\t\t\tstrcat(s, <span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">\t\t\tstrcat(s, sExecPath);</span><br><span class=\"line\">\t\t\tsExecPath = s;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 1.设置运行环境，处理环境变量</span></span><br><span class=\"line\">\tuintptr_t result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取主程序的macho_header结构</span></span><br><span class=\"line\">\tsMainExecutableMachHeader = mainExecutableMH;</span><br><span class=\"line\">    <span class=\"comment\">// 进程是否受限</span></span><br><span class=\"line\">\tsProcessIsRestricted = issetugid();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( geteuid() != <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// if we are not root, see if the binary is requesting restricting the use of DYLD_ env vars.</span></span><br><span class=\"line\">\t\tsProcessIsRestricted |= hasRestrictedSegment(mainExecutableMH);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( sProcessIsRestricted )</span><br><span class=\"line\">\t\tpruneEnvironmentVariables(envp, &amp;apple);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\">// 检查设置环境变量</span></span><br><span class=\"line\">\t\tcheckEnvironmentVariables(envp, ignoreEnvironmentVariables);</span><br><span class=\"line\">    <span class=\"comment\">// 如果设置了DYLD_PRINT_OPTS环境变量，则打印参数</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( sEnv.DYLD_PRINT_OPTS ) </span><br><span class=\"line\">\t\tprintOptions(argv);</span><br><span class=\"line\">    <span class=\"comment\">// 如果设置了DYLD_PRINT_ENV环境变量，则打印环境变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( sEnv.DYLD_PRINT_ENV ) </span><br><span class=\"line\">\t\tprintEnvironmentVariables(envp);</span><br><span class=\"line\">    <span class=\"comment\">// 根据Mach-O头部获取当前运行架构信息</span></span><br><span class=\"line\">\tgetHostInfo();</span><br><span class=\"line\">    <span class=\"comment\">// 注册gdb的监听者, 用于调试</span></span><br><span class=\"line\">\tstateToHandlers(dyld_image_state_dependents_mapped, sBatchHandlers)-&gt;push_back(notifyGDB);</span><br><span class=\"line\">\tsAllImages.reserve(INITIAL_IMAGE_COUNT);</span><br><span class=\"line\">\tsImageRoots.reserve(<span class=\"number\">16</span>);</span><br><span class=\"line\">\tsAddImageCallbacks.reserve(<span class=\"number\">4</span>);</span><br><span class=\"line\">\tsRemoveImageCallbacks.reserve(<span class=\"number\">4</span>);</span><br><span class=\"line\">\tsImageFilesNeedingTermination.reserve(<span class=\"number\">16</span>);</span><br><span class=\"line\">\tsImageFilesNeedingDOFUnregistration.reserve(<span class=\"number\">8</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"meta\">#ifdef WAIT_FOR_SYSTEM_ORDER_HANDSHAKE</span></span><br><span class=\"line\">\t<span class=\"comment\">// &lt;rdar://problem/6849505&gt; Add gating mechanism to dyld support system order file generation process</span></span><br><span class=\"line\">\tWAIT_FOR_SYSTEM_ORDER_HANDSHAKE(dyld_all_image_infos.systemOrderFlag);</span><br><span class=\"line\"><span class=\"meta\">#endifCommand PhaseScriptExecution failed with a nonzero exit code</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"comment\">// 2.初始化主程序</span></span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 加载可执行文件并生成一个ImageLoader实例对象</span></span><br><span class=\"line\">\t\tsMainExecutable = instantiateFromLoadedImage(mainExecutableMH, mainExecutableSlide, sExecPath);</span><br><span class=\"line\">\t\tsMainExecutable-&gt;setNeverUnload();</span><br><span class=\"line\">\t\tgLinkContext.mainExecutable = sMainExecutable;</span><br><span class=\"line\">\t\tgLinkContext.processIsRestricted = sProcessIsRestricted;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 3.加载共享缓存</span></span><br><span class=\"line\">\t\tcheckSharedRegionDisable();</span><br><span class=\"line\">\t<span class=\"meta\">#if DYLD_SHARED_CACHE_SUPPORT</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( gLinkContext.sharedRegionMode != ImageLoader::kDontUseSharedRegion )</span><br><span class=\"line\">\t\t\tmapSharedCache();</span><br><span class=\"line\">\t<span class=\"meta\">#endif</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 4.加载插入的动态库</span></span><br><span class=\"line\">        <span class=\"comment\">// 加载所有DYLD_INSERT_LIBRARIES指定的库</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>\t( sEnv.DYLD_INSERT_LIBRARIES != <span class=\"literal\">NULL</span> ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span>* lib = sEnv.DYLD_INSERT_LIBRARIES; *lib != <span class=\"literal\">NULL</span>; ++lib) </span><br><span class=\"line\">\t\t\t\tloadInsertedDylib(*lib);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsInsertedDylibCount = sAllImages.size()<span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 5.链接主程序</span></span><br><span class=\"line\">        <span class=\"comment\">// 开始链接主程序, 此时主程序已经被加载到gLinkContext.mainExecutable中, 调用 link 链接主程序。内核调用的是ImageLoader::link 函数。</span></span><br><span class=\"line\">\t\tgLinkContext.linkingMainExecutable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\tlink(sMainExecutable, sEnv.DYLD_BIND_AT_LAUNCH, ImageLoader::RPathChain(<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>));</span><br><span class=\"line\">\t\tgLinkContext.linkingMainExecutable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( sMainExecutable-&gt;forceFlat() ) &#123;</span><br><span class=\"line\">\t\t\tgLinkContext.bindFlat = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\tgLinkContext.prebindUsage = ImageLoader::kUseNoPrebinding;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 6.获取程序入口</span></span><br><span class=\"line\">\t\tresult = (uintptr_t)sMainExecutable-&gt;getMain();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 7.链接插入的动态库</span></span><br><span class=\"line\">        <span class=\"comment\">// 对 sAllimages （除了主程序的Image外）中的库调用link进行链接, 例如是libSystem就是此时加入的</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( sInsertedDylibCount &gt; <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; sInsertedDylibCount; ++i) &#123;</span><br><span class=\"line\">\t\t\t\tImageLoader* image = sAllImages[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tlink(image, sEnv.DYLD_BIND_AT_LAUNCH, ImageLoader::RPathChain(<span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"meta\">#if SUPPORT_OLD_CRT_INITIALIZATION</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Old way is to run initializers via a callback from crt1.o</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( ! gRunInitializersOldWay ) </span><br><span class=\"line\">\t<span class=\"meta\">#endif</span></span><br><span class=\"line\">        <span class=\"comment\">// 8.执行初始化方法</span></span><br><span class=\"line\">        <span class=\"comment\">// 执行初始化方法, 其中`+load` 和constructor方法就是在这里执行, `initializeMainExecutable`方法先是内部调用动态库的初始化方法, 然后调用主程序的初始化方法</span></span><br><span class=\"line\">\t\tinitializeMainExecutable(); <span class=\"comment\">// run all initializers</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcatch(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* message) &#123;</span><br><span class=\"line\">\t\thalt(message);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcatch(...) &#123;</span><br><span class=\"line\">\t\tdyld::log(<span class=\"string\">\"dyld: launch failed\\n\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#ifdef ALTERNATIVE_LOGFILE</span></span><br><span class=\"line\">\t<span class=\"comment\">// only use alternate log during launch, otherwise file is open forever</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( sLogfile != STDERR_FILENO ) &#123;</span><br><span class=\"line\">\t\tclose(sLogfile);</span><br><span class=\"line\">\t\tsLogfile = STDERR_FILENO;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\">    <span class=\"comment\">// 9.返回程序入口</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>dyld::_main()</code>是整个<code>App</code>启动的关键，整个加载过程可以大概分为以下9步</p>\n<ol>\n<li>设置运行环境，处理环境变量</li>\n<li>初始化主程序</li>\n<li>加载共享缓存</li>\n<li>加载插入的动态库</li>\n<li>链接主程序</li>\n<li>获取程序入口</li>\n<li>链接插入的动态库</li>\n<li>执行初始化方法</li>\n<li>返回程序入口</li>\n</ol>\n<h5 id=\"设置运行环境，处理环境变量\">设置运行环境，处理环境变量<a href=\"post/iOS-runtime-node-5#设置运行环境，处理环境变量\"></a></h5><p>我们可以看到作为入参的<code>mainExecutableMH</code>变量是一个<code>macho_header</code>的结构体。</p>\n<p>这里先说一下<code>Mach</code>和<code>Mach-O</code>，<code>Mach</code>是一种操作系统内核，<code>Mach</code>内核被<code>NeXT</code>公司的<code>NeXTSTEP</code>操作系统使用。在<code>Mach</code>上，一种可执行的文件格是就是<code>Mach-O（Mach Object file format）</code>。1996年，乔布斯将<code>NeXTSTEP</code>带回苹果，成为了OS X的内核基础。所以虽然<code>OS X</code>是<code>Unix</code>的“后代”，但所主要支持的可执行文件格式是<code>Mach-O</code>。</p>\n<p><code>Mach-O</code>文件格式如下</p>\n<div class=\"article-img\"><p><img src=\"https://s2.ax1x.com/2019/07/02/ZJeHw6.jpg\" alt data-zoomable></p></div>\n<p><code>Mach-O</code>文件的数据主题可分为三大部分，分别是头部(Header)、加载命令(Load Commands)、和最终的数据(Data)</p>\n<ul>\n<li>Header: 保存了一些基本信息，包括该文件的运行平台、文件类型、LoadCommands个数等</li>\n<li>LoadCommands: 在加载Mach-O文件时会使用这里的数据来确定内存的分布以及相关的加载命令。比如我们的main函数的加载地址，程序所需的dyld的文件路径，以及相关依赖库的文件路径。</li>\n<li>Data: 包含了具体的代码、数据等等。</li>\n</ul>\n<p>在这一步主要是设置运行参数、环境变量等。在开始的时候先调用<code>setContext()</code>设置上下文信息，包括一些回调函数、参数、标志信息等，设置回调函数都是<code>dyld</code>模块自身实现的，在<code>setContext()</code>中都已经设置完成。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setContext(mainExecutableMH, argc, argv, envp, apple);</span><br></pre></td></tr></table></figure></p>\n<p>之后将<code>mainExecutableMH</code>赋值给了<code>sMainExecutableMachHeader</code>，也就是主程序的<code>macho_header</code>结构体，表示当前主程序的<code>Mach-O</code>头部信息，加载器根据<code>Mach-O</code>头部信息就可以解析整个<code>Mach-O</code>文件信息。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sMainExecutableMachHeader = mainExecutableMH;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"初始化主程序\">初始化主程序<a href=\"post/iOS-runtime-node-5#初始化主程序\"></a></h5><p>这一步将主程序的<code>Mach-O</code>加载进内存，并实例化一个<code>ImageLoader</code>，<code>instantiateFromLoadedImage()</code>先调用<code>isCompatibleMachO()</code>检测<code>Mach-O</code>头部<code>magic、cputype、cpusubtype</code>等属性，判断当前<code>cpu</code>是否支持，如果支持则调用<code>ImageLoaderMachO::instantiateMainExecutable()</code>实例化主程序</p>\n<p>具体代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static ImageLoader* instantiateFromLoadedImage(const macho_header* mh, uintptr_t slide, const char* path)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t// try mach-o loader</span><br><span class=\"line\">    // isCompatibleMachO 是检查mach-o的subtype是否是当前cpu可以支持</span><br><span class=\"line\">\tif ( isCompatibleMachO((const uint8_t*)mh, path) ) &#123;</span><br><span class=\"line\">\t\tImageLoader* image = ImageLoaderMachO::instantiateMainExecutable(mh, slide, path, gLinkContext);</span><br><span class=\"line\">        // 将image添加到imagelist。所以我们在Xcode使用image list命令查看的第一个便是我们的machO</span><br><span class=\"line\">\t\taddImage(image);</span><br><span class=\"line\">\t\treturn image;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tthrow &quot;main executable not a known format&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ImageLoaderMachO::instantiateMainExecutable()</code>会调用<code>sniffLoadCommands()</code></p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// create image for main executable</span></span><br><span class=\"line\">ImageLoader* ImageLoaderMachO::instantiateMainExecutable(<span class=\"keyword\">const</span> macho_header* mh, uintptr_t slide, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* path, <span class=\"keyword\">const</span> LinkContext&amp; context)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//dyld::log(\"ImageLoader=%ld, ImageLoaderMachO=%ld, ImageLoaderMachOClassic=%ld, ImageLoaderMachOCompressed=%ld\\n\",</span></span><br><span class=\"line\">\t<span class=\"comment\">//\tsizeof(ImageLoader), sizeof(ImageLoaderMachO), sizeof(ImageLoaderMachOClassic), sizeof(ImageLoaderMachOCompressed));</span></span><br><span class=\"line\">\t<span class=\"comment\">// 是否被压缩</span></span><br><span class=\"line\">    <span class=\"keyword\">bool</span> compressed;</span><br><span class=\"line\">    <span class=\"comment\">// 统计段数量</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> segCount;</span><br><span class=\"line\">    <span class=\"comment\">// 统计库数量</span></span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> libCount;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 获取相关数据</span></span><br><span class=\"line\">\tsniffLoadCommands(mh, path, &amp;compressed, &amp;segCount, &amp;libCount);</span><br><span class=\"line\">\t<span class=\"comment\">// instantiate concrete class based on content of load commands</span></span><br><span class=\"line\">    <span class=\"comment\">// 是否被压缩</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( compressed ) </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ImageLoaderMachOCompressed::instantiateMainExecutable(mh, slide, path, segCount, libCount, context);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ImageLoaderMachOClassic::instantiateMainExecutable(mh, slide, path, segCount, libCount, context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在<code>sniffLoadCommands()</code>中主要获取一些关键性数据</p>\n<ul>\n<li><p>compressed: 主要是判断 LC_DYLD_INFO 和 LC_DYLD_INFO_ONLY 加载命令, 若Mach-O存在LC_DYLD_INFO和LC_DYLD_INFO_ONLY加载命令，则说明是压缩类型的Mach-O</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     switch (cmd-&gt;cmd) &#123;</span><br><span class=\"line\">case LC_DYLD_INFO:</span><br><span class=\"line\">case LC_DYLD_INFO_ONLY:</span><br><span class=\"line\">\t*compressed = true;</span><br><span class=\"line\">\tbreak;</span><br><span class=\"line\">\t...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>segCount: 根据 LC_SEGMENT_COMMAND 加载命令来统计段数量，这里说明了段的数量是不能超过255的。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       case LC_SEGMENT_COMMAND:</span><br><span class=\"line\">\t\t\t// ignore zero-sized segments</span><br><span class=\"line\">\t\t\tif ( ((struct macho_segment_command*)cmd)-&gt;vmsize != 0 )</span><br><span class=\"line\">\t\t\t\t*segCount += 1;</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">   </span><br><span class=\"line\">   ...</span><br><span class=\"line\"></span><br><span class=\"line\">   // fSegmentsArrayCount is only 8-bits</span><br><span class=\"line\">if ( *segCount &gt; 255 )</span><br><span class=\"line\">\tdyld::throwf(&quot;malformed mach-o image: more than 255 segments in %s&quot;, path);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>libCount: 这里根据 LC_LOAD_DYLIB、LC_LOAD_WEAK_DYLIB、LC_REEXPORT_DYLIB、LC_LOAD_UPWARD_DYLIB 这几个加载命令来统计库的数量，同样库的数量这里也规定了是不能超过4095的</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       case LC_LOAD_DYLIB:</span><br><span class=\"line\">\t\tcase LC_LOAD_WEAK_DYLIB:</span><br><span class=\"line\">\t\tcase LC_REEXPORT_DYLIB:</span><br><span class=\"line\">\t\t\t*libCount += 1;</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">   </span><br><span class=\"line\">   ...</span><br><span class=\"line\"></span><br><span class=\"line\">       // fSegmentsArrayCount is only 8-bits</span><br><span class=\"line\">if ( *libCount &gt; 4095 )</span><br><span class=\"line\">\tdyld::throwf(&quot;malformed mach-o image: more than 4095 dependent libraries in %s&quot;, path);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>根据是否被压缩执行不同的<code>ImageLoader</code><br>实例化方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ( compressed ) </span><br><span class=\"line\">\t\treturn ImageLoaderMachOCompressed::instantiateMainExecutable(mh, slide, path, segCount, libCount, context);</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t\treturn ImageLoaderMachOClassic::instantiateMainExecutable(mh, slide, path, segCount, libCount, context);</span><br></pre></td></tr></table></figure>\n<p><code>classic</code>与<code>compressed</code>的初始化大同小异 这里以<code>compressed</code>为例: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// create image for main executable</span><br><span class=\"line\">ImageLoaderMachOCompressed* ImageLoaderMachOCompressed::instantiateMainExecutable(const macho_header* mh, uintptr_t slide, const char* path, </span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tunsigned int segCount, unsigned int libCount, const LinkContext&amp; context)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    // 实例化image</span><br><span class=\"line\">\tImageLoaderMachOCompressed* image = ImageLoaderMachOCompressed::instantiateStart(mh, path, segCount, libCount);</span><br><span class=\"line\"></span><br><span class=\"line\">\t// set slide for PIE programs</span><br><span class=\"line\">    // 为PIE设置所需参数，PIE -&gt; Position Independent Executables</span><br><span class=\"line\">\timage-&gt;setSlide(slide);</span><br><span class=\"line\"></span><br><span class=\"line\">\t// for PIE record end of program, to know where to start loading dylibs</span><br><span class=\"line\">\tif ( (mh-&gt;flags &amp; MH_PIE) &amp;&amp; !context.noPIE )</span><br><span class=\"line\">\t\tfgNextPIEDylibAddress = (uintptr_t)image-&gt;getEnd();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\timage-&gt;setNeverUnload();</span><br><span class=\"line\">\timage-&gt;instantiateFinish(context);</span><br><span class=\"line\">\t</span><br><span class=\"line\">    // 如果设置了verboseMapping 则输出详细日志</span><br><span class=\"line\">\tif ( context.verboseMapping ) &#123;</span><br><span class=\"line\">\t\tdyld::log(&quot;dyld: Main executable mapped %s\\n&quot;, path);</span><br><span class=\"line\">\t\tfor(unsigned int i=0, e=image-&gt;segmentCount(); i &lt; e; ++i) &#123;</span><br><span class=\"line\">\t\t\tconst char* name = image-&gt;segName(i);</span><br><span class=\"line\">\t\t\tif ( (strcmp(name, &quot;__PAGEZERO&quot;) == 0) || (strcmp(name, &quot;__UNIXSTACK&quot;) == 0)  )</span><br><span class=\"line\">\t\t\t\tdyld::log(&quot;%18s at 0x%08lX-&gt;0x%08lX\\n&quot;, name, image-&gt;segPreferredLoadAddress(i), image-&gt;segPreferredLoadAddress(i)+image-&gt;segSize(i));</span><br><span class=\"line\">\t\t\telse</span><br><span class=\"line\">\t\t\t\tdyld::log(&quot;%18s at 0x%08lX-&gt;0x%08lX\\n&quot;, name, image-&gt;segActualLoadAddress(i), image-&gt;segActualEndAddress(i));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例化完成后将<code>image</code>返回并调用<code>addImage()</code>方法，将<code>image</code>添加到管理容器中，更新了内存分布信息.</p>\n<p>整个过程基本分为三个步骤</p>\n<ol>\n<li>合法性检测</li>\n<li>解析<code>Mach-O</code>文件头信息，将<code>segments</code>等具体信息 构建到<code>image</code>的实例中</li>\n<li>添加<code>image</code>到管理容器</li>\n</ol>\n<h5 id=\"加载共享缓存\">加载共享缓存<a href=\"post/iOS-runtime-node-5#加载共享缓存\"></a></h5><p>这一步会先调用<code>checkSharedRegionDisable()</code>方法检测共享缓存是否被禁用，接下来调用<code>mapSharedCache()</code>加载共享缓存</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> mapSharedCache()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tuint64_t cacheBaseAddress;</span><br><span class=\"line\">\t<span class=\"comment\">// quick check if a cache is alreay mapped into shared region</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( _shared_region_check_np(&amp;cacheBaseAddress) == <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">\t\tsSharedCache = (dyld_cache_header*)cacheBaseAddress;</span><br><span class=\"line\">\t\t<span class=\"comment\">// if we don't understand the currently mapped shared cache, then ignore</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( strcmp(sSharedCache-&gt;magic, ARCH_CACHE_MAGIC) != <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">\t\t\tsSharedCache = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( gLinkContext.verboseMapping ) </span><br><span class=\"line\">\t\t\t\tdyld::log(<span class=\"string\">\"dyld: existing shared cached in memory is not compatible\\n\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"meta\">#if __i386__ || __x86_64__</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// &lt;rdar://problem/5925940&gt; Safe Boot should disable dyld shared cache</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// if we are in safe-boot mode and the cache was not made during this boot cycle,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// delete the cache file</span></span><br><span class=\"line\">\t\tuint32_t\tsafeBootValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tsize_t\t\tsafeBootValueSize = <span class=\"keyword\">sizeof</span>(safeBootValue);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( (sysctlbyname(<span class=\"string\">\"kern.safeboot\"</span>, &amp;safeBootValue, &amp;safeBootValueSize, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>) == <span class=\"number\">0</span>) &amp;&amp; (safeBootValue != <span class=\"number\">0</span>) ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// user booted machine in safe-boot mode</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">struct</span> stat dyldCacheStatInfo;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//  Don't use custom DYLD_SHARED_CACHE_DIR if provided, use standard path</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( ::stat(DYLD_SHARED_CACHE_DIR DYLD_SHARED_CACHE_BASE_NAME ARCH_NAME, &amp;dyldCacheStatInfo) == <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">struct</span> timeval bootTimeValue;</span><br><span class=\"line\">\t\t\t\tsize_t bootTimeValueSize = <span class=\"keyword\">sizeof</span>(bootTimeValue);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ( (sysctlbyname(<span class=\"string\">\"kern.boottime\"</span>, &amp;bootTimeValue, &amp;bootTimeValueSize, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>) == <span class=\"number\">0</span>) &amp;&amp; (bootTimeValue.tv_sec != <span class=\"number\">0</span>) ) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// if the cache file was created before this boot, then throw it away and let it rebuild itself</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ( dyldCacheStatInfo.st_mtime &lt; bootTimeValue.tv_sec ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t::unlink(DYLD_SHARED_CACHE_DIR DYLD_SHARED_CACHE_BASE_NAME ARCH_NAME);</span><br><span class=\"line\">\t\t\t\t\t\tgLinkContext.sharedRegionMode = ImageLoader::kDontUseSharedRegion;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// map in shared cache to shared region</span></span><br><span class=\"line\">        <span class=\"comment\">// 将共享缓存映射到共享区域</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> fd = openSharedCacheFile();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( fd != <span class=\"number\">-1</span> ) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 文件打开成功</span></span><br><span class=\"line\">\t\t\tuint8_t firstPages[<span class=\"number\">8192</span>];</span><br><span class=\"line\">            <span class=\"comment\">// 读取数据</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( ::read(fd, firstPages, <span class=\"number\">8192</span>) == <span class=\"number\">8192</span> ) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">\t\t\t\tdyld_cache_header* header = (dyld_cache_header*)firstPages;</span><br><span class=\"line\">                <span class=\"comment\">// 操作系统位数是否相等</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ( strcmp(header-&gt;magic, ARCH_CACHE_MAGIC) == <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">const</span> shared_file_mapping_np* mappings = (shared_file_mapping_np*)&amp;firstPages[header-&gt;mappingOffset];</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">const</span> shared_file_mapping_np* <span class=\"keyword\">const</span> end = &amp;mappings[header-&gt;mappingCount];</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// validate that the cache file has not been truncated</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">bool</span> goodCache = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">struct</span> stat stat_buf;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"comment\">// 获取文件状态</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ( fstat(fd, &amp;stat_buf) == <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 获取成功</span></span><br><span class=\"line\">\t\t\t\t\t\tgoodCache = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        <span class=\"comment\">// 文件校验</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> shared_file_mapping_np* p = mappings; p &lt; end; ++p) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// rdar://problem/5694507 old update_dyld_shared_cache tool could make a cache file</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// that is not page aligned, but otherwise ok.</span></span><br><span class=\"line\">                            <span class=\"comment\">// 文件损坏</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span> ( p-&gt;sfm_file_offset+p-&gt;sfm_size &gt; (uint64_t)(stat_buf.st_size+<span class=\"number\">4095</span> &amp; (<span class=\"number\">-4096</span>)) ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\tdyld::log(<span class=\"string\">\"dyld: shared cached file is corrupt: %s\"</span> DYLD_SHARED_CACHE_BASE_NAME ARCH_NAME <span class=\"string\">\"\\n\"</span>, sSharedCacheDir);</span><br><span class=\"line\">\t\t\t\t\t\t\t\tgoodCache = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// sanity check that /usr/lib/libSystem.B.dylib stat() info matches cache</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ( header-&gt;imagesCount * <span class=\"keyword\">sizeof</span>(dyld_cache_image_info) + header-&gt;imagesOffset &lt; <span class=\"number\">8192</span> ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">bool</span> foundLibSystem = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                        </span><br><span class=\"line\">                        <span class=\"comment\">// 获取系统缓存文件</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> ( stat(<span class=\"string\">\"/usr/lib/libSystem.B.dylib\"</span>, &amp;stat_buf) == <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">const</span> dyld_cache_image_info* images = (dyld_cache_image_info*)&amp;firstPages[header-&gt;imagesOffset];</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">const</span> dyld_cache_image_info* <span class=\"keyword\">const</span> imagesEnd = &amp;images[header-&gt;imagesCount];</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> dyld_cache_image_info* p = images; p &lt; imagesEnd; ++p) &#123;</span><br><span class=\"line\"> \t\t\t\t\t\t\t\t<span class=\"keyword\">if</span> ( ((time_t)p-&gt;modTime == stat_buf.st_mtime) &amp;&amp; ((ino_t)p-&gt;inode == stat_buf.st_ino) ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tfoundLibSystem = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> ( !sSharedCacheIgnoreInodeAndTimeStamp &amp;&amp; !foundLibSystem ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tdyld::log(<span class=\"string\">\"dyld: shared cached file was build against a different libSystem.dylib, ignoring cache\\n\"</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\tgoodCache = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"comment\">// 缓存文件存在并可用</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ( goodCache ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">const</span> shared_file_mapping_np* mappings = (shared_file_mapping_np*)&amp;firstPages[header-&gt;mappingOffset];</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (_shared_region_map_np(fd, header-&gt;mappingCount, mappings) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// sucessfully mapped cache into shared region</span></span><br><span class=\"line\">\t\t\t\t\t\t\tsSharedCache = (dyld_cache_header*)mappings[<span class=\"number\">0</span>].sfm_address;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ( gLinkContext.verboseMapping ) </span><br><span class=\"line\">\t\t\t\t\t\tdyld::log(<span class=\"string\">\"dyld: shared cached file is invalid\\n\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ( gLinkContext.verboseMapping ) </span><br><span class=\"line\">\t\t\t\t\tdyld::log(<span class=\"string\">\"dyld: shared cached file cannot be read\\n\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tclose(fd);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( gLinkContext.verboseMapping ) </span><br><span class=\"line\">\t\t\t\tdyld::log(<span class=\"string\">\"dyld: shared cached file cannot be opened\\n\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// remember if dyld loaded at same address as when cache built</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果dyld加载到与构建缓存时相同的地址记录</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( sSharedCache != <span class=\"literal\">NULL</span> ) &#123;</span><br><span class=\"line\">\t\tgLinkContext.dyldLoadedAtSameAddressNeededBySharedCache = ((uintptr_t)(sSharedCache-&gt;dyldBaseAddress) == (uintptr_t)&amp;_mh_dylinker_header);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// tell gdb where the shared cache is</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ( sSharedCache != <span class=\"literal\">NULL</span> ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 加载共享缓存</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> shared_file_mapping_np* <span class=\"keyword\">const</span> start = (shared_file_mapping_np*)((uint8_t*)sSharedCache + sSharedCache-&gt;mappingOffset);</span><br><span class=\"line\">\t\tdyld_shared_cache_ranges.sharedRegionsCount = sSharedCache-&gt;mappingCount;</span><br><span class=\"line\">\t\t<span class=\"comment\">// only room to tell gdb about first four regions</span></span><br><span class=\"line\">        <span class=\"comment\">// 前四个地址</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( dyld_shared_cache_ranges.sharedRegionsCount &gt; <span class=\"number\">4</span> )</span><br><span class=\"line\">\t\t\tdyld_shared_cache_ranges.sharedRegionsCount = <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ( gLinkContext.verboseMapping ) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( gLinkContext.sharedRegionMode == ImageLoader::kUseSharedRegion )</span><br><span class=\"line\">\t\t\t\tdyld::log(<span class=\"string\">\"dyld: Mapping shared cache from %s\"</span> DYLD_SHARED_CACHE_BASE_NAME ARCH_NAME <span class=\"string\">\"\\n\"</span>, sSharedCacheDir);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( gLinkContext.sharedRegionMode == ImageLoader::kUsePrivateSharedRegion )</span><br><span class=\"line\">\t\t\t\tdyld::log(<span class=\"string\">\"dyld: Mapping private shared cache from %s\"</span> DYLD_SHARED_CACHE_BASE_NAME ARCH_NAME <span class=\"string\">\"\\n\"</span>, sSharedCacheDir);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> shared_file_mapping_np* <span class=\"keyword\">const</span> end = &amp;start[dyld_shared_cache_ranges.sharedRegionsCount];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> shared_file_mapping_np* p = start; p &lt; end; ++p, ++index ) &#123;</span><br><span class=\"line\">\t\t\tdyld_shared_cache_ranges.ranges[index].start = p-&gt;sfm_address;</span><br><span class=\"line\">\t\t\tdyld_shared_cache_ranges.ranges[index].length = p-&gt;sfm_size;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( gLinkContext.verboseMapping ) &#123;</span><br><span class=\"line\">\t\t\t\tdyld::log(<span class=\"string\">\"        0x%08llX-&gt;0x%08llX %s%s%s init=%x, max=%x\\n\"</span>, p-&gt;sfm_address, p-&gt;sfm_address+p-&gt;sfm_size<span class=\"number\">-1</span>,</span><br><span class=\"line\">\t\t\t\t\t((p-&gt;sfm_init_prot &amp; VM_PROT_READ) ? <span class=\"string\">\"read \"</span> : <span class=\"string\">\"\"</span>),</span><br><span class=\"line\">\t\t\t\t\t((p-&gt;sfm_init_prot &amp; VM_PROT_WRITE) ? <span class=\"string\">\"write \"</span> : <span class=\"string\">\"\"</span>),</span><br><span class=\"line\">\t\t\t\t\t((p-&gt;sfm_init_prot &amp; VM_PROT_EXECUTE) ? <span class=\"string\">\"execute \"</span> : <span class=\"string\">\"\"</span>),  p-&gt;sfm_init_prot, p-&gt;sfm_max_prot);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"meta\">#if __i386__</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// If a non-writable and executable region is found in the R/W shared region, then this is __IMPORT segments</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// This is an old cache.  Make writable.  dyld no longer supports turn W on and off as it binds</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> ( (p-&gt;sfm_init_prot == (VM_PROT_READ|VM_PROT_EXECUTE)) &amp;&amp; ((p-&gt;sfm_address &amp; <span class=\"number\">0xF0000000</span>) == <span class=\"number\">0xA0000000</span>) ) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ( p-&gt;sfm_size != <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">\t\t\t\t\tvm_prot_t prot = VM_PROT_EXECUTE | PROT_READ | VM_PROT_WRITE;</span><br><span class=\"line\">\t\t\t\t\tvm_protect(mach_task_self(), p-&gt;sfm_address, p-&gt;sfm_size, <span class=\"literal\">false</span>, prot);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ( gLinkContext.verboseMapping ) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tdyld::log(<span class=\"string\">\"%18s at 0x%08llX-&gt;0x%08llX altered permissions to %c%c%c\\n\"</span>, <span class=\"string\">\"\"</span>, p-&gt;sfm_address, </span><br><span class=\"line\">\t\t\t\t\t\t\tp-&gt;sfm_address+p-&gt;sfm_size<span class=\"number\">-1</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t(prot &amp; PROT_READ) ? <span class=\"string\">'r'</span> : <span class=\"string\">'.'</span>,  (prot &amp; PROT_WRITE) ? <span class=\"string\">'w'</span> : <span class=\"string\">'.'</span>,  (prot &amp; PROT_EXEC) ? <span class=\"string\">'x'</span> : <span class=\"string\">'.'</span> );</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"meta\">#endif</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"加载插入的动态库\">加载插入的动态库<a href=\"post/iOS-runtime-node-5#加载插入的动态库\"></a></h5><p>这一步是加载环境变量<code>DYLD_INSERT_LIBRARIES</code>中配置的动态库，先判断环境变量<code>DYLD_INSERT_LIBRARIES</code>中是否存在要加载的动态库，如果存在则调用<code>loadInsertedDylib()</code>依次加载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if\t( sEnv.DYLD_INSERT_LIBRARIES != NULL ) &#123;</span><br><span class=\"line\">\tfor (const char* const* lib = sEnv.DYLD_INSERT_LIBRARIES; *lib != NULL; ++lib) </span><br><span class=\"line\">\t\tloadInsertedDylib(*lib);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sInsertedDylibCount = sAllImages.size()-1;</span><br></pre></td></tr></table></figure>\n<h5 id=\"链接主程序\">链接主程序<a href=\"post/iOS-runtime-node-5#链接主程序\"></a></h5><p>这一步调用<code>link()</code>函数将实例化后的主程序进行动态修正，让二进制变为可正常执行的状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">void ImageLoader::link(const LinkContext&amp; context, bool forceLazysBound, bool preflightOnly, const RPathChain&amp; loaderRPaths)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//dyld::log(&quot;ImageLoader::link(%s) refCount=%d, neverUnload=%d\\n&quot;, this-&gt;getPath(), fStaticReferenceCount, fNeverUnload);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tuint64_t t0 = mach_absolute_time();</span><br><span class=\"line\">    // 递归加载所需依赖库</span><br><span class=\"line\">\tthis-&gt;recursiveLoadLibraries(context, preflightOnly, loaderRPaths);</span><br><span class=\"line\">\tcontext.notifyBatch(dyld_image_state_dependents_mapped);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// we only do the loading step for preflights</span><br><span class=\"line\">\tif ( preflightOnly )</span><br><span class=\"line\">\t\treturn;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tuint64_t t1 = mach_absolute_time();</span><br><span class=\"line\">\tcontext.clearAllDepths();</span><br><span class=\"line\">    // 递归进行镜像排序</span><br><span class=\"line\">\tthis-&gt;recursiveUpdateDepth(context.imageCount());</span><br><span class=\"line\"></span><br><span class=\"line\">\tuint64_t t2 = mach_absolute_time();</span><br><span class=\"line\">    // 递归进行rebase修正地址</span><br><span class=\"line\"> \tthis-&gt;recursiveRebase(context);</span><br><span class=\"line\">\tcontext.notifyBatch(dyld_image_state_rebased);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tuint64_t t3 = mach_absolute_time();</span><br><span class=\"line\">    // 递归进行绑定符号表</span><br><span class=\"line\"> \tthis-&gt;recursiveBind(context, forceLazysBound);</span><br><span class=\"line\"></span><br><span class=\"line\">\tuint64_t t4 = mach_absolute_time();</span><br><span class=\"line\">    // 执行若符号绑定</span><br><span class=\"line\">\tthis-&gt;weakBind(context);</span><br><span class=\"line\">\tcontext.notifyBatch(dyld_image_state_bound);</span><br><span class=\"line\"></span><br><span class=\"line\">\tuint64_t t5 = mach_absolute_time();\t</span><br><span class=\"line\">\tstd::vector&lt;DOFInfo&gt; dofs;</span><br><span class=\"line\">    // 注册DOF sections供DTrace调试用</span><br><span class=\"line\">\tthis-&gt;recursiveGetDOFSections(context, dofs);</span><br><span class=\"line\">\tcontext.registerDOFs(dofs);</span><br><span class=\"line\">\tuint64_t t6 = mach_absolute_time();\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfgTotalLoadLibrariesTime += t1 - t0;</span><br><span class=\"line\">\tfgTotalRebaseTime += t3 - t2;</span><br><span class=\"line\">\tfgTotalBindTime += t4 - t3;</span><br><span class=\"line\">\tfgTotalWeakBindTime += t5 - t4;</span><br><span class=\"line\">\tfgTotalDOF += t6 - t5;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// done with initial dylib loads</span><br><span class=\"line\">\tfgNextPIEDylibAddress = 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"获取程序入口\">获取程序入口<a href=\"post/iOS-runtime-node-5#获取程序入口\"></a></h5><p>调用<code>ImageLoaderMachO::getMain()</code>方法返回主程序入口</p>\n<h5 id=\"链接插入的动态库\">链接插入的动态库<a href=\"post/iOS-runtime-node-5#链接插入的动态库\"></a></h5><p>对 <code>sAllimages</code> （除了主程序的<code>Image</code>外）中的库调用<code>link</code>进行链接，<code>sAllImages</code>中保存的第一项是主程序的镜像，所以要从<code>i+1</code>的位置开始，取到的才是动态库的<code>ImageLoader</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ( sInsertedDylibCount &gt; 0 ) &#123;</span><br><span class=\"line\">\t\t\tfor(unsigned int i=0; i &lt; sInsertedDylibCount; ++i) &#123;</span><br><span class=\"line\">\t\t\t\tImageLoader* image = sAllImages[i+1];</span><br><span class=\"line\">\t\t\t\tlink(image, sEnv.DYLD_BIND_AT_LAUNCH, ImageLoader::RPathChain(NULL, NULL));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"执行初始化方法\">执行初始化方法<a href=\"post/iOS-runtime-node-5#执行初始化方法\"></a></h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void initializeMainExecutable()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// record that we&apos;ve reached this step</span><br><span class=\"line\">\tgLinkContext.startedInitializingMainExecutable = true;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// run initialzers for any inserted dylibs</span><br><span class=\"line\">    // 插入动态库的初始化</span><br><span class=\"line\">\tconst int rootCount = sImageRoots.size();</span><br><span class=\"line\">\tif ( rootCount &gt; 1 ) &#123;</span><br><span class=\"line\">\t\tfor(int i=1; i &lt; rootCount; ++i)</span><br><span class=\"line\">\t\t\tsImageRoots[i]-&gt;runInitializers(gLinkContext);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// run initializers for main executable and everything it brings up</span><br><span class=\"line\">    // 主程序初始化</span><br><span class=\"line\">\tsMainExecutable-&gt;runInitializers(gLinkContext);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// register atexit() handler to run terminators in all loaded images when this process exits</span><br><span class=\"line\">\tif ( gLibSystemHelpers != NULL ) </span><br><span class=\"line\">\t\t(*gLibSystemHelpers-&gt;cxa_atexit)(&amp;runTerminators, NULL, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">\t// dump info if requested</span><br><span class=\"line\">\tif ( sEnv.DYLD_PRINT_STATISTICS )</span><br><span class=\"line\">\t\tImageLoaderMachO::printStatistics(sAllImages.size());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这一步由<code>initializeMainExecutable()</code>完成。<code>dyld</code>会优先初始化动态库，然后初始化主程序。</p>\n<h5 id=\"返回程序入口\">返回程序入口<a href=\"post/iOS-runtime-node-5#返回程序入口\"></a></h5><p>至此，整个dyld的加载过程就分析完成了。</p>\n","prev":{"title":"Runtime(六) 可调试的objc4-750.1","slug":"iOS-runtime-node-6"},"next":{"title":"Runtime(四) OC的消息机制","slug":"iOS-runtime-node-4"},"link":"https://vesincc.github.io/post/iOS-runtime-node-5/","toc":[{"title":"程序加载过程","id":"程序加载过程","index":"1","children":[{"title":"动态库","id":"动态库","index":"1.1"},{"title":"程序加载过程","id":"程序加载过程-1","index":"1.2","children":[{"title":"dyld简介","id":"dyld简介","index":"1.2.1"},{"title":"共享缓存机制","id":"共享缓存机制","index":"1.2.2"},{"title":"dyld加载过程","id":"dyld加载过程","index":"1.2.3"}]}]}],"reward":true,"copyright":{"custom":"本文遵守 CC BY-NC-ND 4.0 请保持转载后文章内容的完整，以及文章出处。本人保留所有版权相关权利。"}}